온라인 홀덤 게임(클라이언트 : 스마트폰 애플리케이션-유니티로 개발, 백엔드 : FastAPI로 서버 개발) 을 만들거야. 
메인 모듈에서는 총 3개의 FastAPI 인스턴스가 실행돼.
각각 1번(manager), 2번(floor), 3번(dealer) 인스턴스라고 부를게


1. Fast API 1번 manager 인스턴스 :
- (1) SQL DB 사용
- (2) 유저 계정 생성 라우트(이메일, 비밀번호입력)
- (3) 유저 로그인 라우트 (JWT 토큰 생성) : 로그인 성공하면 홀덤 하우스 로비 화면으로 입장됨
- (4) 유저 비밀전호 변경 라우트 (로그인시 가능)
- (5) 유저 닉네임 생성 라우트 (로그인시 가능)
- (6) 유저 닉네임 변경 라우트 (로그인시 가능)
- (7) 유저 계정 삭제 라우트 (로그인시 가능)
- (8) 유저가 접근 가능한 자신의 게임 플레이 정보 기록 라우트(로그인시 가능) : 3번 인스턴스로부터 전달 받은 데이터를 1번 인스턴스 SQL DB에 기록 (참여한 게임마다 스타팅 카드, (프리플롭-플롭-턴-리버)라운드별 콜/레이즈/폴드/올인 횟수, 승리 방법(쇼다운 전 상대의 폴드로 이겼는지, 쇼다운에서 이겼는지), 이겼을 때 위닝핸드, 해당 게임 최종 팟사이즈, 현재 자신의 스택 사이즈)
- (9) 유저가 접근 불가능하고 관리자만 접근 가능한 모든 유저의 게임 플레이 정보기록 라우트 : 3번 인스턴스로부터 전달받은 데이터를 1번 인스턴스 SQL DB에 기록  (위에 정리한 유저가 접근가능한 플레이 정보기록을 포함해 3번 인스턴스에서 생성된 모든 게임 기록[각 라운드별 각 유저의 모든 핸드, 모든 액션, 스택 및 팟 사이즈 변화 등]을 저장, 관리자로 로그인 했을 때만 접근 및 수정, 삭제 가능)
- (10) 유저가 접근 불가능하고 관리자만 접근 가능한 유저별 페널티 기록 라우트 : 게임방 입장 후 홀덤 게임 시작시부터 쇼다운 전 까지 무단 이탈 횟수, 쇼다운 진행시 무단이탈 횟수, 유저가 BB 또는 SB 자리에 배정된 상태에서 첫 라운드에 무단이탈시 무단이탈 횟수, 2번 인스턴스에서 이뤄지는 실시간 채팅방에서 비속어, 욕설, 광고, 도배 글 작성한 유저 이메일 및 닉네임과 작성 횟수 등을 2번 인스턴스에서 전달받아 DB에 기록)

 2. Fast API 2번 floor 인스턴스 :
- (1) Mongo DB 사용
- (2) 유저가 게임룸을 생성 할 수 있는 라우트 (1번 인스턴스 로그인시 생성된 토큰 주입) : 생성 후 유저는 게임룸에 입장되고 게임 실행 권한이 수여됨
- (3) 유저가 홀덤 하우스 로비화면 상에 있는 게임룸리스트를 보고 원하는 게임룸에 참여신청 할 수 있는 라우트 (1번 인스턴스 로그인시 생성된 토큰 주입) : 서버에서 신청 허용하면 유저는 게임룸에 입장됨. 이때 게임룸은 게임이 진행중인 게임룸일 수도 있고 아직 게임이 시작되지 않은 게임룸일 수도 있음. 
(3)-A. 이미 게임이 진행중인 게임룸의 경우 : 해당 게임룸에서 무단 이탈한 유저가 생겨 자리가 비었을 때만 홀덤 하우스 로비 화면 상의 리스트에 보여짐. 이를 위해 2번 인스턴스의 (10)번 라우트로 요청이 들어감. (10)번 라우트를 통해 게임룸에 정원(6명)이 차서 게임실행권한을 가진 유저가 게임을 실행하면 2번 인스턴스의 (4)번 라우트가 실행
(3)-B. 아직 한번도 게임이 시작되지 않은 게임룸의 경우 : 2번 인스턴스의 (9)번 라우트로 요청이 들어감
- (4) 게임룸을 생성한 유저 또는 게임 시작 권한을 가진 유저가 홀덤 게임을 시작 신청할 수 있는 라우트 : 서버가 신청 허용하면, 3번 dealer 인스턴스가 호출되고 이 인스턴스는 같은 게임룸에 있던 유저들을 대상으로 홀덤 게임 루프를 실행. 홀덤 게임 루프 로직은 3번 인스턴스 내에 구현.
- (5) 게임룸에 입장되어 있는 유저가 게임룸 나가기를 신청할 수 있는 라우트 : 서버에서 신청 허용하면 홀덤 하우스 로비 화면으로 이동됨, 나가기를 신청한 유저가 해당 게임룸을 생성한 유저일 경우, 해당 게임룸에 남아있는 다른 유저에게 게임실행 권한이 수여됨
- (6) 게임룸에 있던 유저가 모두 나가면 비어 있는 게임룸을 없애는 함수
- (7) 유저가 실시간 채팅을 할 수 있는 라우트 : 모든 채팅 내용을 검사하는 함수가 별도로 실행됨. 필터링을 위한 AI 모델이 연결될 수 있음
- (8) 유저가 자신의 플레이 정보를 조회할 수 있는 라우트 : 이 라우트로 요청이 들어오면 1번 인스턴스의 (8)번 라우트로 요청이 넘어가서 필요한 정보를 받아옴
- (9) 만들어진 게임룸과 게임룸에 참여한 유저들이 홀덤 게임을 시작했을 때, 만들어진 게임룸 번호와 만들어진 시각, 참여한 유저들의 이메일과 닉네임을 DB에 기록하는 라우트 : 2번 인스턴스의 (4)번 라우트를 통해 게임시작 요청이 들어오면 자동 실행
- (10) 진행중인 게임룸에서 한 핸드가 끝나고 다시 다음 핸드가 계속될 때, 3번 인스턴스로부터 게임룸 번호와 남아 있는 유저들의 이메일과 닉네임 전달받아 DB에 기록하고, 이 DB를 바탕으로 새로운 유저를 받을 수 있게 하는 라우트
- (11) 클라이언트의 채팅방에 보여지는 채팅 내역은 최근 30건으로 계속 업데이트하는 함수


3. Fast API 3번 dealer 인스턴스 :
- (1) Monge DB 사용 (2번 인스턴스에서 사용하는 DB와 같은 주소에 있는 mongoDB 사용)
- (2) 2번 인스턴스의 (4)번 라우트를 통해 게임실행 요청이 들어올 때마다 매번 새로운 3번 인스턴스가 생성됨. 이때 게임룸 화면에 있던 유저들은 게임 테이블 화면으로 이동됨
- (3) 매번 생성된 인스턴스에서 실행되는 홀덤 게임 루프 로직 : 

(3)-A. 2번 인스턴스의 (9)번라우트를 통해서 현재 게임에 참여하는 유저들의 리스트 정보를 받아와 1번 인스턴스의 (8)번 라우트를 통해 해당 유저의 스택정보를 받은후, 각 유저의 이메일을 각각 SB, BB, UTG, HJ, CO, BTN 순으로 랜덤 맵핑하고 해당 포지션에 해당 유저의 현재 스택과 각 라운드에서 행할 액션 정보를 담은 자료구조를 초기화하는 함수 실행 (이전에 해당 포지션이었던 유저는 왼쪽 포지션으로 한칸씩 이동, 빈 포지션에 새로 참여한 유저 배정) 

(3)-B. 프리플롭, 플롭, 턴, 리버, 쇼다운, 총 다섯 라운드의 루프가 순차적으로 실행되게 하는 함수(루프 종료조건을 만나면 다음 라운드 루프로 라이브 유저들을 이동, 핸드 종료 조건을 만나면 바로 쇼다운 루프로 이동하거나 pot award 단계로 이동)
(3)-C. 각 라운드 루프 안에 해당 라운드에 맞는 로직 구현 (3번 dealer 인스턴스는 클라이언트와 계속 통신하면서 매 라운드 진행)
- (4) 매 라운드마다 생성되는 모든 플레이 정보(각 유저의 스타팅 카드 2장의 정보, 라운드별 실행된 모든 액션 순서, 액션 순서에 따른 유저별 스택 사이즈 변화와 팟 사이즈 변화, 매 라운드마다 무단 이탈한 유저 여부 확인 등)을 기록하는 함수 : 매 라운드마다 이 함수가 호출되고 매 라운드 종료시마다 이 함수의 실행결과가 정리된 데이터는  1번 인스턴스의 9번 및 10번 라우트로 보내짐. 
- (5) 한 핸드(게임)이 종료되면  1번 인스턴스의 8번 라우트로 전달되어야 하는 정보(참여한 게임마다 스타팅 카드, (프리플롭-플롭-턴-리버)라운드별 콜/레이즈/폴드/올인 횟수, 승리 방법(쇼다운 전 상대의 폴드로 이겼는지, 쇼다운에서 이겼는지), 이겼을 때 위닝핸드, 해당 게임 최종 팟사이즈)를 정리해 전달하는 함수 호출
- (6) 한 핸드가 종료되면 각 유저(클라이언트)들에게 게임을 계속 할 건지 요청을 보내는 함수
- (7) 게임을 계속하는 유저가 1명 이상 남아 있을 시 3번 딜러 인스턴스는 2번 인스턴스의 10번 라우트를 실행하고, 3번 인스턴스는 종료됨. 종료시 3번 인스턴스의 (4)번 라우트에서 생성된 해당 게임의 매라운드 게임 플레이 정보와 4번인스턴스의 (5)번 인스턴스에서 생성된 정보는 해당 게임의 인스턴스 종료시 MongoDB에서 삭제. 게임을 계속 이어가겠다고 답한 유저들은 게임 테이블 화면에 계속 남아 있음. 2번 인스턴스의 10번 라우트를 통해 2번 인스턴스의 3번 라우트가 실행


인스턴스간 통신일 일어나는 경우는
1. 2번 인스턴스에서 유저가 자신의 플레이정보를 조회하기 위해 1번 인스턴스의 DB에 접근하는 것
2. 2번 인스턴스에서 floor가 기존 게임룸에 있는 유저들이 새로운 게임을 기존 게임룸에서 계속 실행하기 위해 필요한 유저 리스트를 3번 인스턴스에서 받아오는 것
3. 2번 인스턴스에서 게임룸에 있는 유저가 게임을 실행할 때,  3번 인스턴스가 호출 되는 것
4. 3번 인스턴스에서 게임실행에 필요한 유저 리스트와 각 유저의 스택 정보를 각각 2번인스턴스의 DB와 1번인스턴스의 DB에서 가져오는 것
5. 3번 인스턴스에서 게임 진행도중 발생하는 게임플레이 정보를 1번 인스턴스의 DB에 전달하는 것
6. 3번 인스턴스에서 게임이 정상종료 됐을 때, 같은 게임룸에서 게임을 계속하길 원하는 유저리스트를 2번 인스턴스에 전달하는 것
7. 2번 인스턴스의 실시간 채팅 내역이 주기적으로 1번 인스턴스의 DB로 백업되는 것

인스턴스간 통신도 있지만 인스턴스와 클라이언트 간의 통신도 있어.
예를 들면
1번 인스턴스의 경우 :
유저계정 생성, 로그인, 비밀번호 변경, 닉네임 생성, 닉네임 변경, 유저계정 삭제
위 6가지 기능은 클라이언트에서 1번 인스턴스에 요청가능한 내용들이야.
추가적으로 유저 플레이 정보 조회 기능은 클라이언트에서 2번 인스턴스에 요청시 2번인스턴스와 1번인스턴스의 통신을 통해 2번인스턴스에서 클라이언트로 가는 데이터야.

2번 인스턴스의  경우 :
게임룸 생성, 게임룸 참여, 게임 실행, 채팅
위 4가지 기능은 클라이언트 요청으로 실행되는 기능들이야.
특히 게임룸 참여 기능은 3번 인스턴스 실행도중 및 실행종료시 참여가능한 게임룸 리스트가 계속 업데이트되어 게임룸 참여가 가능한지를 2번 인스턴스를 통해 클라이언트에게 보여져야해.

3번 인스턴스의 경우 :
유저가 게임을 실행하게 되면 2번 인스턴스에서 3번 인스턴스를 호출하지만
3번 인스턴스는 해당 홀덤 게임에 참여한 모든 클라이언트와 홀덤 게임 종료시까지 매 라운드마다 매 액션마다 계속 통신을 해야해. 동시에 액션 정보들은 1번 인스턴스에 전달되어야 하고,
무단 이탈한 플레이어가 생기는 경우 2번 인스턴스에도 전달해야해. 게임이 끝나면 모든 게임정보는 1번 인스턴스로 전달되고 최종적으로 빈 자리 개수도 2번 인스턴스에 전달된 다음 종료되어야 해.

위와 같은 통신 구조를 더 효율적으로 진행할 수 있는 아키텍쳐가 있을까?
바꿔 말해 현재 아키텍쳐가 최선일까?
클라이언트(유저가 자신의 스마트폰에서 실행한 홀덤게임 애플리케이션) 는 서버에 오픈된 하나의 포트로 최초 접속하면
그 이후로 요청 종류에 따라 필요한 포트로 알아서 자동으로 접속되도록 해야해. 


위와 같은 아키텍쳐를 생각하고 있어.
적절하고 올바른지 검토해봐


위 아키텍쳐를 반영한 코드를 짜기 위해서
내가 기본적으로 짜놓은 코드와 모듈구조는 아래와 같아

./app
├── main.py
├── mongod.conf
├── .env
├── auth
│ └── authenticate.py
│ └── hash_password.py
│ └── jwt_handler.py
├── database
│ └── connection.py
│ └── crud.py
├── models
│ ├── events.py
│ └── users.py
├── routes
  ├── events.py
  └── users.py

#./auth/autenticate.py
from auth.jwt_handler import verify_access_token
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer 

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/user/signin")

async def authenticate(token: str = Depends(oauth2_scheme)) -> str:
    if not token:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Sign in for access"
        )

    decoded_token = verify_access_token(token) 
    return decoded_token["user"]
    
#./auth/hash_password.py
from passlib.context import CryptContext

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
# DeprecationWarning: 'crypt' is deprecated and slated for removal in Python 3.13 변경 필요

class HashPassword:

    
    def create_hash(self, password: str):
        try:
            return pwd_context.hash(password)
        except UnknownHashError as e:
            # 예외 처리 로직 추가 필요
            raise ValueError("An error occurred during hashing..") from e

    def verify_hash(self, plain_password: str, hashed_password: str):
        try:
            return pwd_context.verify(plain_password, hashed_password)
        except ValueError as e:
            raise ValueError("An error occurred during password verification.") from e
            
#./auth/jwt_handler.py
import time
from datetime import datetime, timezone
from database.connection import Settings
from fastapi import HTTPException, status
from jose import jwt, JWTError  
# algorithms=["HS256"] 충분히 안전한지 확인 필요

settings = Settings()

def create_access_token(user: str):
    payload = {
        "user": user,
        "expires": time.time() + 86400 # 86400 seconds == 24 hours
    }

    token = jwt.encode(payload, settings.SECRET_KEY, algorithm="HS256")
    return token

def verify_access_token(token: str):
    try:
        data = jwt.decode(token, settings.SECRET_KEY, algorithms=["HS256"])

        expire = data.get("expires")

        if expire is None: 
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="No access token supplied"
            )
        
        current_time = datetime.now(timezone.utc)
        expire_time = datetime.fromtimestamp(expire, timezone.utc)

        if current_time > expire_time: 
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Token expired!"
            )
        return data

    except JWTError: 
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Invalid token"
        )
        
#./database/connection.py
from typing import Optional
from beanie import init_beanie 
from models.events import Event  
from models.users import User  
from motor.motor_asyncio import AsyncIOMotorClient 
from pydantic_settings import BaseSettings 
from dotenv import load_dotenv
import os

# .env 파일 로드
load_dotenv(dotenv_path=os.path.join(os.path.dirname(__file__), '../.env'))

class Settings(BaseSettings):
    DATABASE_URL: Optional[str] = None
    client: Optional[AsyncIOMotorClient] = None
    SECRET_KEY: Optional[str] = None

    async def initialize_database(self):
        self.client = AsyncIOMotorClient(self.DATABASE_URL)
        database_name = self.DATABASE_URL.split("/")[-1]  # URL에서 데이터베이스 이름 추출
        # database = self.client["TempDB"] 위처럼 안하고 이 코드를 쓰면 test_app.py 를 pytest로 실행시 testdb 가 아니라 TempDB 를 사용하게 되어 매 테스트마다 데이터 중복이 발생한다
        database = self.client[database_name]
        await init_beanie(database=database, document_models=[Event, User])

    async def close_database(self):
        if self.client:
            self.client.close()

    class Config:
        env_file = ".env"

settings = Settings()


#./database/crud.py
from typing import Any, List
from beanie import PydanticObjectId
from pydantic import BaseModel


class Database:

    def __init__(self, model):
        self.model = model
         
    async def save(self, document) -> None:
        await document.create()
        return

    async def get(self, id: PydanticObjectId) -> Any:
        doc = await self.model.get(id)
        return doc

    async def get_all(self) -> List[Any]:
        docs = await self.model.find_all().to_list()
        return docs

    async def update(self, id: PydanticObjectId, body: BaseModel) -> Any:
        des_body = body.model_dump(exclude_unset=True)  
        update_query = {"$set": des_body}
        doc = await self.get(id)
        if not doc:
            return False
        await doc.update(update_query)
        return doc

    async def delete(self, id: PydanticObjectId) -> bool:
        doc = await self.get(id)
        if not doc:
            return False
        await doc.delete()
        return True
        
#./models/events.py
from typing import Optional, List
from beanie import Document
from pydantic import BaseModel
# PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. 
# Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.7/migration/warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)
# 확인 필요

class Event(Document): 
    creator: Optional[str] = None 
    action: str
    hands: List[str]
    betting_size: Optional[int] = None 
    stack: int
    
    class Config:
        json_schema_extra = {
            "example": {
                "action": "raise",
                "hands": ["4C", "KS"],
                "betting_size": 500,
                "stack": 10000,
            }
        }

    class Settings:
        name = "events"


class EventUpdate(BaseModel):
    action: Optional[str] = None
    hands: Optional[List[str]] = None
    betting_size: Optional[int] = None 
    stack: Optional[int] = None

    class Config:
        json_schema_extra = {
            "example": {
                "action": "fold",
                "hands": ["4C", "KS", "AH"],
                "betting_size": 0,
                "stack": 0,
            }
        }

#./models/users.py
from beanie import Document
from pydantic import BaseModel, EmailStr


class User(Document):

    email: EmailStr
    password: str

    class Settings:
   
        name = "users"

    class Config:
        json_schema_extra = {
            "example": {
                "email": "who@are.you",
                "password": "notstrongenough!!!",
            }
        }


class TokenResponse(BaseModel):

    access_token: str
    token_type: str
    
#./routes/events.py
from typing import List
from beanie import PydanticObjectId 
from fastapi import APIRouter, HTTPException, status, Depends 
from database.crud import Database
from auth.authenticate import authenticate
from models.events import Event, EventUpdate


event_router = APIRouter(
    tags=["Events"]
)

event_database = Database(Event)

@event_router.get("/get_all_events", response_model=List[Event])
async def retrieve_all_events() -> List[Event]:
    events = await event_database.get_all() 
    return events

@event_router.get("/get_event/{id}", response_model=Event)
async def retrieve_event(id: PydanticObjectId) -> Event: 
    event = await event_database.get(id)                 
    if not event:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Event with supplied ID does not exist"
        )
    return event

@event_router.post("/new_event")
async def create_event(body: Event, user: str = Depends(authenticate)) -> dict:  
    body.creator = user 
    await event_database.save(body) 
    return {
        "message": "Event created successfully",
        "user": user 
    }

@event_router.put("/edit_event/{id}", response_model=Event)
async def update_event(id: PydanticObjectId, body: EventUpdate, user: str = Depends(authenticate)) -> Event: 
    event = await event_database.get(id)
    if not event:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Event not found"
        )
    if event.creator != user: 
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Operation not allowed"
        )
    updated_event = await event_database.update(id, body) 
    if not updated_event:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Event with supplied ID does not exist"
        )
    return updated_event

@event_router.delete("/delete_event/{id}")
async def delete_event(id: PydanticObjectId, user: str = Depends(authenticate)) -> dict:
    event = await event_database.get(id) 
    if not event:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Event not found"
        )
    if event.creator != user:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Operation not allowed"
        )
    event = await event_database.delete(id)

    return {
        "message": "Event deleted successfully."
    }
    
#./routes/users.py
from auth.hash_password import HashPassword 
from auth.jwt_handler import create_access_token 
from database.crud import Database 
from fastapi import APIRouter, HTTPException, status, Depends 

from fastapi.security import OAuth2PasswordRequestForm 
from models.users import User, TokenResponse 

user_router = APIRouter(
    tags=["User"],
)

user_database = Database(User)
hash_password = HashPassword()

@user_router.post("/signup")
async def sign_user_up(user: User) -> dict:
    user_exist = await User.find_one(User.email == user.email) 

    if user_exist:
        raise HTTPException(
            status_code=status.HTTP_409_CONFLICT,
            detail="User with email provided exists already."
        )
    
    hashed_password = hash_password.create_hash(user.password) 
    user.password = hashed_password 

    await user_database.save(user) 
    return {
        "message": "User created successfully"
    }

@user_router.post("/signin", response_model=TokenResponse) # 
async def sign_user_in(user: OAuth2PasswordRequestForm = Depends()) -> dict:

    user_exist = await User.find_one(User.email == user.username)
    if not user_exist:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="User with email does not exist."
        )

    if hash_password.verify_hash(user.password, user_exist.password):
        access_token = create_access_token(user_exist.email)
        return {
            "access_token": access_token,
            "token_type": "Bearer"
        }

    raise HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Invalid details passed."
    )



#./main.py
import uvicorn
from fastapi import FastAPI
from contextlib import asynccontextmanager 
from database.connection import settings 
from routes.events import event_router
from routes.users import user_router

from fastapi.middleware.cors import CORSMiddleware

@asynccontextmanager
async def lifespan(app: FastAPI):
    await settings.initialize_database()
    print("Connected to MongoDB")  
    try:
        yield 
    finally:
        print("Closing database connection...")  
        await settings.close_database()  

app = FastAPI(lifespan=lifespan)

app.include_router(user_router, prefix="/user")
app.include_router(event_router, prefix="/event")

@app.get("/")
async def welcome() -> dict:
    return {
        "message": "Hello World"
    }

origins = ["*"]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
    )

if __name__ == '__main__':
    uvicorn.run("main:app", host="127.0.0.1", port=8000, reload=True)
    
    
#./.env
DATABASE_URL=mongodb://localhost:27017/planner
SECRET_KEY = HI5HL3V3L$3CR3T

#./mongod.conf
storage:
  dbPath: /home/philosucker/holdem/app/store

systemLog:
  destination: file
  path: /home/philosucker/holdem/app/mongod.log
  logAppend: true

net:
  bindIp: 127.0.0.1
  port: 27017

위 모듈구조와 코드를 바탕으로
내가 제안한 아키텍쳐를 반영한 새로운 모듈 구조를 짜고, 각 모듈에 내가 제안한 아키텍쳐의 기능을 담은 함수들이 짜여진 스크립트를 만들어봐.
필요하면 모든 함수명과 클래스명, 모듈명을 바꿔도 좋아.
참고용으로 준 모듈 구조 자체를 바꿔도 좋아.
너가 제시한 개선방안도 적용해. 

짜면서 추가 개선사항이 있으면 코드에 반영해.
구체적으로 짜여지지 않은 로직이 있다면 별도로 주석으로 표시해 놓고
임시로 네가 한번 짜봐

















