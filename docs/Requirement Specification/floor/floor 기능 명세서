

웹소켓에 최초 연결된 클라이언트는
JWT 토큰에서 user_nick 키를 통해 
DB에 입장 퇴장 기록을 남기고, 접속 여부도 체크 한다음
웹소켓 연결에 성공하고 나면 floor 서버에 여러가지 요청을 하게 돼. 

예를 들어 클라이언트는 웹소켓으로 create_table, join_table, search_table, cancel_table, chat_input 라우트 요청을 하게돼

그리고  각 요청에 대해 서버는
다음과 같은 데이터 클래스를 이용해서 각 요청에 대해 다음 처리를 하고 그 결과를 웹소켓을 통해 해당 요청을 보낸 클라이언트들에게 보내야해.

# floor/database/models.py
from beanie import Document
from pydantic import BaseModel, Field
from datetime import datetime

class Connection(BaseModel):
    connected: bool = False
    entry_time : datetime = None
    exit_time : datetime = None

class UserLog(Document):
    user_nick : str = None
    connection_log : Connection
    
    class Settings:
        collection = "user_log"  # MongoDB 컬렉션 이름

class TableLog(Document):
    table_id: str = None
    creation_time: datetime = None
    rings: int = 0
    stakes: str = None
    agent: dict[str, int] = Field(default_factory=dict)
    now: int = 0
    max: int = 0
    status: str = 0
    new_players: dict[str, int] = Field(default_factory=dict)  # {"user_nick" : stk_size}
    continuing_players: dict[str, int] = Field(default_factory=dict) # {"user_nick" : stk_size}
    determined_positions: dict[str, str] = Field(default_factory=dict) #  {"user_nick" : position}

    class Settings:
        collection = "table_log"

일단 클라이언트의 웹소켓 요청과 별개로
서버는 웹소켓에 연결된 모든 클라이언트에게 다음 설명하는 데이터를 1초 단위로 계속 보내는 서비스를 해줘야 하는데 이걸 먼저 알려줄게.
그 다음 클라이언트가 하는 요청들에 대해 알려줄게.

서버가 클라이언트에게 제공하는 첫번째 서비스 : 
DB의 TableLog 컬렉션에서 table_log에 있는 모든 table id에 대해  
table info 딕셔너리의 키 중  rings,  stakes, agent, now, max, status 다섯가지 키와 각 키의 밸류를 담은 딕셔너리를 
해당 table_id의 밸류로 해서 만든 모든 table_id 딕셔너리의 리스트를 
모든 클라이언트들이 웹소켓을 통해서  서버로부터 1초 단위로 계속 받게 되는 거야. 
정확히는 이 리스트를 밸류로 하고 table_list를 키로 하는 딕셔너리를 받게 된다고 하자.
근데 table_id 딕셔너리의 리스트를 만들 때. 
각 table_id에 대해서
max-now 값이 1인 테이블 id가 있으면
그 중에 테이블 생성 시각 creation_time이 가장 오래된 테이블 id인 딕셔너리가 리스트의 맨 앞에오고
max-now 값이 2인 테이블 id가 있으면
그 중 테이블 생성 시각 creation_time이 가장 오래된 테이블 id인 딕셔너리가 리스트의 두번째로 오고
max-now 값이 3인 테이블 id가 있으면
그 중 테이블 생성 시각 creation_time이 가장 오래된 테이블 id인 딕셔너리가 리스트의 세번째로 오고
그 밖의 경우엔
max-now 값이 가장 작은 순서대로 오름차순으로 정렬해서 보내되.
마지막 조건으로 max-now 값이 0인 테이블은 테이블 리스트에서 제외시켜야 해. 

그럼 이제부터 클라이언트가 웹소켓을 통해 보내는 각 요청에 대해 서버가 어떤 서비스를 제공해야 하는 지 알려줄게 

1. create_table 요청 :
클라이언트는 rings, stakes, agent 값을 웹소켓을 통해 보내온다.
서버는 TableLog에서 테이블을 하나 만든다 ( table_id 키가 추가되고 해당 키의 밸류 값도 추가되는 것이다. 다시 말해 table_log 딕셔너리에 새로운 table_id에 대한 딕셔너리 추가됨)
그 다음 해당 table_id의 rings,  stakes, agent 변수에 클라이언트가 보내온 값을 갱신해 기록하고
now는 초기값 0에서 +1을 해준다. max는 rings 값으로 업데이트 한다. status 도 디폴트 waiting 값을 유지한다
마지막으로 new_players 딕셔너리에 클라이언트의 닉네임을 키로 추가하고 밸류는 0으로 초기화한다
그리고 creation 완료 메시지를 보내 
 
2. join_table 요청 :
클라이언트는 table_id를 웹소켓을 통해 보내온다.
서버는 TableLog 에서 해당 id를 조회해 now를 +1 업데이트하고
new_players 딕셔너리에 클라이언트의 닉네임을 키로 추가하고 밸류는 0으로 초기화한다
그리고 join 완료 메시지를 보내

3. cancel_table 요청:
클라이언트는 table_id를 웹소켓을 통해 보내와.
서버는 TableLog에서 해당 id를 조회해서 now를 -1 업데이트하고
new_players 딕셔너리에 요청을 보낸 클라이언트의 닉네임이 있으면 딕셔너리에서 해당 닉네임을 삭제해.
그리고 cancel 완료 메시지를 보내

4. search_table 요청:
클라이언트는 rings, stakes, agent 값을 보내와.
그러면 DB에서 해당 값과 일치하는 테이블 중에 max-now 값이 가장 작은 테이블 중에서 creation_time이 가장 오래된 순으로 
테이블 리스트를 오름차순 정렬 한 리스트를 만들어서 클라이언트에게 보내줘야해.  

마지막으로 서버가 클라이언트에게 제공하는 서비스를 하나 더 알려줄게
broadcast_table_ready 함수야
이게 뭐냐면 
TableLog를 1초 단위로 계속 모니터링 하면서
now값과 max값이 일치하는 테이블이 발견되면
해당 테이블의 new_players 와 continuing_players 에 들어 있는 닉네임을 가진 클라이언트들에게
table_ready 메시지를 보내는 거야. 


이 모든 요청을 websocket_endpoint 함수 내에 정의하는 건 좋지 않아보여.
각 웹소켓 요청을 별도의 라우트로 구분하고
각각의 요청 라우트에 대한 서버의 웹소켓 응답도 별도의 함수로 구분해서
스크립트별로 모듈화를 하고 싶어.

그리고 내가 원하는 요청과 서비스들을 구현하려면
웹소켓에 접속한 클라이언트들을 닉네임별로 관리해서 전체 메시징을 보내거나 개별 메시지를 보내거나 table full 메시지 같은 경우는
그룹 메시징을 보낼 수 있어야 할 거 같아.

지금까지 말한 것들을 잘 검토해서 아래 참고사항을 가지고 가장 최선의 방식으로 구현을 해봐.

참고사항 : 현재 패키지 구조는 다음과 같아

floor/database/connection.py
floor/database/models.py
floor/routers
floor/services
floor/main.py

floor/database/connection.py 는 아래와 같아
# floor/database/connection.py
from beanie import init_beanie 
from motor.motor_asyncio import AsyncIOMotorClient 
from pydantic_settings import BaseSettings 
from models import UserLog, TableLog, GameLog, ChatLog
import os

class Settings(BaseSettings):
    
    DATABASE_URL: str

    class Config:
        env_file = "./house/.env"
        env_file_encoding = 'utf-8'

    async def initialize_database(self):
        self.client = AsyncIOMotorClient(self.DATABASE_URL)
        database_name = self.DATABASE_URL.split("/")[-1]
        database = self.client[database_name]
        await init_beanie(database=database, document_models=[UserLog, TableLog, GameLog, ChatLog])

    async def close_database(self):
        if self.client:
            self.client.close()

settings = Settings(DATABASE_URL=os.getenv("MONGO_GAME_DATABASE_URL"))


floor/main.py 는 아래와 같아. 
import uvicorn
from fastapi import FastAPI
from contextlib import asynccontextmanager
import asyncio

from database import connection
from messaging import rabbitmq_consumer
from routers import web_socket_router
from services import floor_service

@asynccontextmanager
async def lifespan():
    await connection.settings.initialize_database()
    task1 = asyncio.create_task(rabbitmq_consumer.start_consuming())
    task2 = asyncio.create_task(floor_service.broadcast_table_list())
    task3 = asyncio.create_task(floor_service.broadcast_table_ready())
    try:
        yield
    finally:
        print("Closing database connection...")
        await connection.settings.close_database()
        
        # 메시지 브로커 종료
        task1.cancel()
        task2.cancel()
        task3.cancel()
        try:
            await task1
        except asyncio.CancelledError:
            pass
        try:
            await task2
        except asyncio.CancelledError:
            pass
        try:
            await task3
        except asyncio.CancelledError:
            pass

app = FastAPI(lifespan=lifespan)
app.include_router(web_socket_router.router)

if __name__ == '__main__':
    uvicorn.run("main:app", host="127.0.0.1", port=8001, reload=True)


