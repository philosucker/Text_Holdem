1. 사용자는 reception에서 JWT 토큰을 발급 받는다.
    (추가로 리프레시 토큰 발급도 구현 및 관리 필요)

2. JWT 토큰에는 이메일과 닉네임, 스택사이즈, 만료기한 정보가 있다.

3. 토큰 내 이메일 사용경로
    reception 서버에서 사용자가 로그인 후 서버에
    비밀번호 변경, 닉네임 변경, 계정 삭제 요청시 JWT 토큰의 이메일을 인증 키로 사용한다.
        (비밀번호 변경 등 민감한 작업에는 추가 인증 단계(예: 2단계 인증)를 고려 필요)
        
4. 사용자는 floor 서버에 웹소켓 연결을 시도할 때 JWT 토큰도 함께 전달한다.

5. floor 서버에서 사용자 인증시 토큰에 인코딩된 스택사이즈가 100 미만일 경우 floor 서버 웹소켓 연결을 거부한다.

6. floor 서버에서 인증을 마치면 토큰에 있는 닉네임을 floor 서버의 DB 고유 키로 사용하고, 
별도로 active_connections = {닉네임 : 웹소켓} 딕셔너리를 생성해 
서버메모리에 올려 사용자의 상태 관리 및 메시징에 활용한다.

6. 사용자는 dealer 서버에 웹소켓 연결을 시도할 때, table_id와 JWT 토큰을 함께 전달한다.

    
7. dealer 서버에서 인증을 마치면 토큰에 인코딩된 닉네임을 활용해  
active_connections = {table_id : {닉네임 : 웹소켓}} 딕셔너리를 생성해 
서버메모리에 올려 사용자의 상태 관리 및 메시징에 활용한다.


추가 고려 사항
    리프레시 토큰 발급 및 관리 구현
        토큰 만료 관리: 
        리프레시 토큰을 사용하면 만료된 액세스 토큰을 갱신할 수 있어 
        사용자가 로그아웃하지 않고도 세션을 유지할 수 있습니다.
        보안 유지: 
        리프레시 토큰은 보통 서버에서만 저장되며, 액세스 토큰이 탈취되더라도 
        리프레시 토큰이 유효하면 새로운 액세스 토큰을 발급받아 사용할 수 있습니다. 
        이 과정에서 보안 정책을 강화할 수 있습니다.
        토큰 갱신 로직:
        클라이언트는 액세스 토큰이 만료되기 전에 
        리프레시 토큰을 사용하여 새로운 액세스 토큰을 받아와야 합니다. 
        
    각 서버는 동일한 토큰의 반복 사용을 감지하여 차단하는 로직 구현
        현재 클라이언트가 접속 상태 불량 등으로 원치 않는 서버와의 연결 종료시 재연결 시도를 5초 동안 5번 시도하게 돼 있다.
        5초 안에 5번을 넘어가거나 5초 이후 재연결 신청이 오면 서버가 30초 동안 해당 클라이언트로부터의 연결을 거부하는 로직 필요

    JWT 토큰에 포함된 정보는 서버에서만 접근 가능하도록 암호화된 전송(HTTPS)을 사용해야 함
        Nginx 사용

 
