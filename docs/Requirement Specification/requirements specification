
    
홀덤앱 관점에서 본 프로세스 흐름 
    
이제부터 스마트폰에 설치된 클라이언트의 unity 앱을 홀덤앱이라고 하자
홀덤앱은 리버스 프록시 서버의 엔드포인트를 알고 있다.
    프록시의 엔드포인트는 1.2.3.4:56 이라고 하자.
    클라이언트측 구현 내용은 < > 괄호 안에 명기
    서버측 구현 내용은 [ ] 괄호 안에 명기
홀덤앱은 리버스 프록시 서버의 엔드포인트로 서로 다른 세 FastAPI서버에 HTTP 요청을 보내게 된다.

첫번째 reception 서버
    reception 서버로의 첫번째 HTTP요청
        <홀덤앱 회원가입 버튼 터치>  1.2.3.4:56/register 로 입력한 아이디, 비번, 닉네임 전달
        프록시는 reception서버/from_user/sign_up 엔드포인트로 라우팅을 해준다.
        (서버는 SQL DB에 계정을 초기화한다)
            <만약 아무것도 입력이 안됐는데 회원가입 버튼을 누르면 홀덤 앱에서 아이디와 비번을 입력하라고 메시지를 띄워준다>
            <이메일이 이미 있거나, 닉네임이 이미 있는 경우 유저에게 다시 입력하라고 메시지를 띄워준다>
            <계정생성에 성공하면 서버로부터 딕셔너리(닉네임 : 스택사이즈)를 돌려 받는다. 그러면 로그인을 하라고 메시지를 띄워준다>

    reception 서버로의 두번째 HTTP 요청
        <홀덤앱에서 로그인 버튼 터치> 1.2.3.4:56/log_in 으로 입력한 아이디, 비번을 전달
        프록시는 reception서버/from_user/sign_in 엔드포인트로 라우팅해준다
        (서버는 로그인 절차를 거치고 토큰을 발급한다)    
            <만약 아무것도 입력이 안됐는데 로그인 버튼을 누르면 홀덤 앱에서 아이디와 비번을 입력하라고 메시지를 띄워줘>
            <이메일이 틀리거나 비밀번호가 틀리면 유저에게 다시 입력하라고 메시지를 띄워준다>
            <로그인에 성공하면 서버로부터 딕셔너리(토큰)을 돌려 받는다. 
            
    <세번째 닉네임 변경, 네번째 비밀번호 변경, 다섯번째 계정삭제 요청도 있는데 이는 나중에 구현>
    
두번째 floor 서버
    floor 서버로의 첫번째 HTTP 요청
    <로그인 성공 후 토큰을 받으면 토큰은 홀덤앱에 저장하고 1.2.3.4:56/robby 로 웹소켓연결요청을 보낸다>
    프록시는 floor서버/robby 엔드포인트로 라우팅을 해준다.
    
    (floor 서버는 리슨소켓에서 클라이언트 접속 요청이 들어오면 토큰을 검증한 후, 해당 클라이언트와 소켓 연결을 완료한다.)
    (토큰에서 닉네임을 추출해  mongoDB에 해당 닉네임이 없으면 user_log에 추가하고 connected = True로 바꾼다.
    해당 닉네임이 있으면 connected = True로 바꾼다)
    (floor 서버는 모든 유저에게 로비화면 렌더링을 명령하고, 로비화면 렌더링 갱신을 위해 mongoDB에서 테이블 리스트와 채팅 내역을 웹소켓을 통해 주기적으로 전달한다)
    <홀덤앱은 웹소켓으로부터 로비화면 렌더링 명령이 들어오면 로비화면을 렌더링한다>
                


    
    이하 기능을 위한 통신은 웹소켓으로 한다
        <홀덤앱에서 Create 버튼 클릭> :floor서버/robby/create_table
        (floor 서버는 요청을 받으면 mongoDB table_log 업데이트 후 모든 유저에게 리스트 전달
        모든 사용자에게 해당 테이블 초록색 렌더링 요청
        테이블 생성한 유저에게 해당 테이블만 노란색 렌더링 요청)
        ( create_table을 한 유저는 다른 테이블에 참여하거나 새로운 테이블 생성 불가. table_cancel만 가능
        옵션 : 테이블 생성 옵션 stake : low or high, rings : 6 or 9, A.I agent : 0~8, private : yes or no
        
        <홀덤앱에서 테이블 목록에 테이블 하나 터치> : floor서버/robby/join_table
        (floor 서버는 요청을 받으면 mongoDB table_log의 new_players 업데이트 후 모든 유저에게 리스트 전달
        테이블 참여한 유저에게 해당 테이블만 노란색 렌더링 요청)
        (table에 join한 유저들은 cancel_table만 가능하고 다른 테이블 join 이나 create 는 못하게 해야함)
        
        <홀덤앱에서 클릭한 테이블을 다시 클릭해 선택 취소> : floor서버/robby/cancel_table
        (floor 서버는 요청을 받으면 mongoDB table_log 의 new_players 업데이트 후 모든 유저에게 리스트 전달
        테이블 선택 취소한 유저에게 선택했던 테이블 다시 초록색으로 렌더링 요청)
        (cancel_table을 한 유저는 create_table, create_join 가능. cancel_table은 불가)
        
        <홀덤앱에서 채팅창에 채팅입력> : floor서버/robby/chat_input
        (floor 서버는 요청을 받으면 mongoDB chat_log 업데이트 후 테이블 리스트 모드 유저에게 렌더링 요청)
        
        <홀덤앱에서 Search 버튼 클릭 : rings, stakes, agent 조건 등을 선택하면 자동으로 테이블 매칭, 나중에 구현>
        <홀덤앱에서 Stats 버튼 클릭 : 유저의 게임 통계를 볼 수 있다. 나중에 구현)
        
    (floor 서버는 정원이 가득찬 테이블을 발견하면 table_log의 해당 테이블 정보를 확인해  
    now(new_players와 continuing_players의 키 개수 합산값)와 max가 일치하면 해당 테이블 상태를 waiting에서 playing으로 바꾸고
    모든 사용자에게 해당 테이블 빨간색으로 렌더링 요청. 해당 테이블은 선택 불가하게 요청한다
    동시에 테이블에 참여한 유저들에게는 table full 메시지와 테이블 번호를 보낸다
   recetption 서버에  "new_players" 키에 해당하는 유저들의 스택사이즈를 요청한다
   agency 서버에는 에이전트 난이도별 요청 개수를 담은 딕셔너리를 보낸다
   reception 서버로부터 스택사이즈 응답을 받으면 테이블 딕셔너리를 만든다. >>>>>>>>>>>>테이블 딕셔너리는 table_log의 해당 테이블 아이디의 모든 정보를 그대로 담을 것인가? 아니면 별도로 만들어보낼 것인가?
   dealer 서버에 table_ready 메시지와 테이블 딕셔너리를 보낸다.


    floor 서버의 mongoDB는 4개의 Json을 가진다.
    1. user_log : 유저별 게임 내용 기록 (홀덤앱의 Stats 기능 제공시 사용, 테이블 매칭시 사용) 고유번호는 닉네임으로
                유저의 최초 스택사이즈,
                테이블에서 유저의 포켓 핸드, 커뮤니티 카드, 베스트 핸드 등 카드 정보
                테이블에서 유저의 액션 정보(매 스트릿, 매턴 마다, 액션에 따른 스택사이즈 변화)
                
    2. game_log : 테이블별, 핸드 내용 기록 (agent의 훈련데이터로 사용)

        table_id, rings, stakes, agent, new_players, continuing_players > table_log에 있는 내용들
        최종 팟 사이즈, 승자 닉네임, 승리방식(폴드/쇼다운), 마지막 스트릿 이름, 
        스트릿별 라이브 플레이어 숫자 증감율, 스트릿 별 팟사이즈 및 증가율, 
        승자의 스타팅카드, 최종 커뮤니티 카드, 위닝핸드, 위닝 핸드를 가진 플레이어의 스트릿별 액션 리스트(순서 및 통계) > user_log 에 들어갈 값들
        루징 핸드를 가진 플레이어들의 스트릿별 액션 리스트(순서 및 통계)
        스트릿별 플레이시간, 핸드 시작시간, 핸드 종료시간, 총 플레이 시간    
    
    3. table_log(이하 테이블 목록) : 테이블 생성 및 참여시 테이블 상태변화
            table_log = {
            "table_id": 00234,
            "rings": "6",
            "stakes": "low",
            "agent": "2E",
            "now": 3,
            "max": 6,
            "private": True, # default = False
            "pw": "34abc", # default = None
            "status" : "waiting" # 또는 "playing" 또는 "dismissed"
            "new_players": {"nick_1": 3000, "nick_2: 20000, "nick_3": 10000, "nick_4": 5000},
            "continuing_players : {"nick_1": 3000, "nick_2: 20000, "nick_3": 1000}
            "determined_positions" : {"nick_1" : "BB", "nick_2": "CO", "nick_3" : D}
               }
    4. chat_log : 채팅내역 업데이트

               
    게임 중 접속 끊어지면 > floor서버에서 접속상태 확인은 최초 웹소켓 연결 성공시 DB의 connected 값 True. 
    이후 연결 끊어짐은 어떻게 확인?????
    확인 됐을 때 connected 값 False 
    
    
    floor에서 클라이언트와 맺어진 웹소켓 연결 종료는
    일차적으로 홀덤앱이 종료될 때 클라이언트 쪽에서 종료요청을 하고
    그 외에는 서버가 한다.
        1. 서버 유지보수 및 업데이트시 종료요청
        2. 오래된 연결, 비활성 클라이언트(일정 시간 유휴상태)
        3. 비정상적인 행동 탐지

세번째 dealer 서버
    dealer 서버로의 첫번째 HTTP 요청
    <홀덤앱은 floor 서버로부터 table full 메시지와 테이블 번호를 받으면 1.2.3.4:56/table/{table_id} 로 웹소켓연결요청을 보낸다>????????????
    프록시는 dealer서버/table/{table_id} 엔드포인트로 라우팅을 해준다.????????????
    (dealer서버는 floor와 agency로부터 각각 받은 table_ready 메시지,table dict와 agent_ready 메시지, agent dict 의 내용을 토대로 
    사용자들과 에이전트들의 닉네임과, 각각의 스택사이즈를 홀덤앱에 전달한다.
    그리고 table_dict에 agent_dict 내용을 추가하고, table_dict를 딜러 인스턴스에 인자로 넘겨 호출한다
    이후 게임 루프를 돌면서 액션요청과 렌더링 갱신 요청을 웹소켓을 통해 사용자와 에이전트들에게 계속 보낸다 )
    <홀덤앱은 dealer 서버로부터 웹소켓 연결이 완료되어 최초로 상대방들의 닉네임과 스택사이즈, 포지션을 받으면 
    로비화면에서 테이블 화면으로 렌더링한다>
    
    (dealer 인스턴스는 게임이 끝나면 사용자들에게 계속 게임에 남을 것인지 묻고, 
    남는다고 답변한 사용자들에게 기존 포지션에서 시계방향으로 한칸씩 이동시킨 자리로 렌더링 요청을 보내고
    남지 않는다고 답변한 사용자들에게 로비화면 렌더링 요청을 보낸다.
    그리고 floor에게 게임 기록 로그를 보고할 때 게임에 계속 남겠다고 한 유저들의 닉네임이 담긴 딕셔너리 
    "continuing_player" : {"nick_1" : 최종스택, "nick_3" :최종 스택, "nick_4" : 최종스택}, 
    "determined positions" : {"nick_1" : "BB", "nick_3": "CO", "nick_4" : D} 를 만들어 로그에 추가해 보낸다.
   
   (dealer 서버는 dealer 인스턴스가 반환한 게임로그를 floor에게 전달한 후 
    인스턴스에 연결된 모든 유저들의 웹소켓 연결을 종료하고 해당 인스턴스를 종료시킨다.)

    <웹소켓 연결이 종료되고 렌더링 요청을 받은 사용자들은 각자 요청받은 화면을 렌더링한다>
    (dealer 서버는 게임이 끝나면 모든 게임 기록을 floor에게 전달해)
    (floor 서버는 dealer 서버에게서 게임기록을 전달 받으면 mongoDB에 모두 기록해)
    (floor 서버는 reception 서버에게 유저들의 스택사이즈 업데이트를 요청해)
    
    
    (floor 서버는 딜러서버로부터 게임로그를 전달 받고, "continuing_player" 키가 비어있는 경우
    table_log의 해당 테이블 아이디를 조회해서 status를 playing에서 dismissed로 바꾸고
    사용자들에게 보내는 테이블리스트에서 제외시킨다.
    "continuing_player" 키가 비어있지 않은 경우 table_log의 해당 테이블 아이디를 조회해서 
    status를 playing에서 waiting으로 바꾸고
    해당 테이블의 now 값을 "continuing_player" 키의 밸류 딕셔너리의 길이로 업데이트하고(에이전트가 있었던 경우 에이전트 수까지 합산)
    DB의 table_log의 해당 아이디 테이블의 "continuing_players" 에 
    딜러서버로부터 전달받은 게임 로그에서의 "continuing_player" 키의 밸류를 복사하고
    업데이트 된 테이블 리스트를 모든 유저에게 보내면서 해당 테이블을 빨간색에서 초록색으로 렌더링 요청한다.



수정 필요한 코드
continuing_players 들은 현재 각자 바뀐 포지션을 렌더링하고 있으므로
딜러인스턴스를 호출하면서 전달하는 인자에 new_players와 continuing_players가 들어가게 되므로
determined positions 딕셔너리를 사용해 이미 자리가 정해진 기존 유저들의 포지션을 제외한 남은 포지션에
new_players 에 있는 유저들이 랜덤 배치되도록 코드를 수정해야 한다.





