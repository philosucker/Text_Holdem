CH11 DB 연동

로컬에 MySQL이 설치되어 있다면 바로 연동해도 되지만
별도의 MySQL DB 컨테이너를 만들어 실행한다

1. docker-compse.yaml 에 아래를 추가한다

    services:
      demo-app:
        build: .
        volumes:
          - .dockervenv:/src/.venv
          - .:/src
        ports:
          - 8000:8000  # 호스트 머신의 8000번 포트를 docker의 8000번 포트에 연결
        environment:
          - WATCHFILES_FORCE_POLLING=true  # 핫 리로드

    # 이하 새로 추가
      db:
        image: mysql:8.0
        platform: linux/x86_64  # 애플 실리콘 맥(M1, M2 등)의 경우, 기본적으로 ARM 아키텍처를 사용합니다. 
        # 일부 Docker 이미지는 ARM 아키텍처에서 호환되지 않기 때문에, linux/x86_64 플랫폼을 명시적으로 설정하여 x86_64 아키텍처용 이미지를 사용하도록 합니다.
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'  # MySQL 서버의 root 계정을 비밀번호 없이 생성하도록 설정합니다. 
          # 이는 보안에 취약할 수 있으므로, 개발 환경에서만 사용하는 것이 좋습니다.
          MYSQL_DATABASE: 'demo'  # 컨테이너가 시작될 때 demo라는 이름의 기본 데이터베이스를 생성합니다.
          TZ: 'Asia/Seoul'  # 시간대 설정
        volumes:
          - mysql_data:/var/lib/mysql # MySQL 데이터 파일을 저장할 디렉토리를 지정합니다. 
        command: --default-authentication-plugin=mysql_native_password 
        # MySQL 8.0에서는 보안 강화를 위해 caching_sha2_password가 기본 인증 플러그인으로 사용됩니다. 
        # 이 플러그인은 SHA-256 해시 알고리즘을 사용하여 비밀번호를 암호화하며, 보안이 강화된 암호화를 제공합니다.
        # 일부 클라이언트 라이브러리는 이 플러그인을 지원하지 않으므로, mysql_native_password로 변경하여 호환성을 유지합니다.
        # mysql_native_password는 MySQL 5.x에서 기본으로 사용되던 인증 플러그인으로, 더 널리 사용되고 많은 클라이언트와 호환성이 좋습니다. 
        # 이 플러그인은 MD5 해시 알고리즘을 사용하여 비밀번호를 암호화합니다.
        ports:
          - 33306:3306  # 호스트 머신의 33306번 포트를 도커의 3306번 포트에 연결
    volumes:
      mysql_data: # Docker 볼륨 mysql_data를 정의합니다. 이 볼륨은 MySQL 데이터 파일을 지속적으로 저장하는 데 사용됩니다.
      
      
2. 도커를 다시 실행한다 (fastapi가 실행중이면 종료 후)
sudo docker compose up

    이제 fastapi와 mysql이 동시에 실행된다

    확인을 위해 새 터미널에서 프로젝트 디렉토리에 들어간 후 아래 코드를  실행해본다
    sudo docker compose exec db mysql demo
    

3. FastAPI 애플리케이션에서 MySQL 에 접속하기 위한 준비

    FastAPI 에서는 MySQL과의 연결을 위해 sqlalchemy 라는 ORM (Object-rerational mapper) 라이브러리를 사용한다
    ORM은 객체지향 프로그래밍과 DB간의 연결을 쉽게 해주는 기술이다.
    이를 통해 DB의 데이터를 객체로 다루고, 객체를 DB에 저장하거나 조회할 수 있다.

    ORM은 파이썬 객체를 MySQL과 같은 관계형데이터베이스 RDBMS의 데이터 구조로 변환한다.
    MySQL의 경우 테이블 구조를 클래스로 정의하면 이를 읽거나 저장하는 SQL문을 발행해준다. (아래 5. FastAPI 에 DB 모델을 정의한다. 참고)

    sqlalchemy는 백엔드에 다양한 DB를 이용할 수 있다.

MySQL 클라이언트로 pymysql을 함께 설치한다. 

    demo-app 이 실행된 상태에서 poetry add 를 실행해 두 의존성 패키지를 설치한다
    # demo-app 컨테이너에서 poetry add sqlalchemy pymysql 를 실행

    sudo docker compose exec demo-app poetry add sqlalchemy pymysql
    
    설치되면  pyproject.toml과 poetry.lock 의 내용이 변경된 것을 확인할 수 있다.

    [tool.poetry.dependencies]
    python = "^3.11"
    fastapi = "^0.111.0"
    uvicorn = {extras = ["standard"], version = "^0.30.1"}
    sqlalchemy = "^2.0.30"
    pymysql = "^1.1.1"
    
    
4. 프로젝트 디렉토리에 DB 연결 함수를 추가한다.
SQLAlchemy를 사용해 FastAPI 애플리케이션에서 MySQL 데이터베이스에 연결하고 세션을 관리할 수 있게 한다.

    # api/db.py

    from sqlalchemy import create_engine # SQLAlchemy에서 데이터베이스와의 연결을 생성하는 함수입니다.
    from sqlalchemy.orm import sessionmaker, declarative_base
    # sessionmaker: 데이터베이스 세션을 생성하는 팩토리입니다.
    # declarative_base: 모델 클래스의 베이스 클래스를 생성하는 함수입니다.

    '''
    DB_URL : SQLAlchemy가 데이터베이스에 연결할 때 사용할 URL입니다.
    mysql+pymysql: SQLAlchemy와 pymysql을 사용하여 MySQL 데이터베이스에 연결한다는 의미입니다.
    root: 데이터베이스의 사용자명입니다. 여기서는 비밀번호 없이 root 사용자로 연결합니다.
    db: Docker Compose에서 정의된 MySQL 서비스의 이름입니다. 이는 Docker 네트워크 내에서의 호스트명입니다.
    3306: MySQL의 기본 포트 번호입니다. # 호스트 머신의 33306번 포트를 도커의 3306번 포트에 연결했다.
    demo: 연결할 데이터베이스의 이름입니다.
    charset=utf8: 데이터베이스의 문자 인코딩을 UTF-8로 설정합니다.
    '''
    DB_URL = "mysql+pymysql://root@db:3306/demo?charset=utf8"

    '''
    create_engine(DB_URL, echo=True): SQLAlchemy 엔진을 생성합니다.
    DB_URL: 앞서 정의한 데이터베이스 URL입니다.
    echo=True: SQLAlchemy가 실행하는 SQL 쿼리를 로그로 출력합니다. 이는 디버깅에 유용합니다.
    '''
    db_engine = create_engine(DB_URL, echo=True)

    '''
    sessionmaker: 세션을 생성하는 팩토리입니다. 세션 객체를 만듭니다. 세션은 데이터베이스와의 상호작용을 위해 필요합니다.

        SQLAlchemy와 같은 ORM(Object-Relational Mapping) 라이브러리에서 세션(Session)은 
        데이터베이스 연결과 트랜잭션을 관리하는 역할을 합니다.
            세션(Session)의 역할
                연결 관리(Connection Management):
                세션은 데이터베이스와의 연결을 유지하고 관리합니다. 필요한 경우 데이터베이스 연결을 열고, 작업이 끝나면 연결을 닫습니다.
                
                객체 상태 관리(Object State Management):
                세션은 객체의 상태(새로 생성됨, 수정됨, 삭제됨)를 추적합니다. 이를 통해 변경된 내용을 데이터베이스에 커밋하거나 롤백할 수 있습니다.
                
                트랜잭션 관리(Transaction Management):
                세션은 트랜잭션을 관리합니다. 트랜잭션은 데이터베이스 작업의 논리적 단위로, 여러 작업을 하나의 단위로 묶어 관리합니다. 
                세션을 통해 트랜잭션을 시작하고, 커밋하거나 롤백할 수 있습니다.

        세션을 사용하여 데이터베이스에 객체를 추가하거나 변경할 수 있습니다. 예를 들어, 새로운 레코드를 추가하거나 기존 레코드를 수정할 수 있습니다.
        세션의 commit 메서드를 호출하여 변경 내용을 데이터베이스에 반영합니다. 이 시점에서 트랜잭션이 종료되고, 모든 변경 사항이 데이터베이스에 영구적으로 저장됩니다.
        오류가 발생하면 세션의 rollback 메서드를 호출하여 모든 변경 사항을 취소할 수 있습니다. 이는 트랜잭션이 시작된 이후의 모든 변경 사항을 무효화합니다.
        작업이 완료되면 세션을 종료합니다. 이는 세션이 사용하는 모든 리소스를 해제하고, 데이터베이스 연결을 닫습니다.
        
    autocommit=False: 자동 커밋을 비활성화합니다. 이는 트랜잭션이 명시적으로 커밋될 때까지 데이터를 커밋하지 않습니다.
    autoflush=False: 자동 플러시를 비활성화합니다. 이는 세션이 커밋되기 전에 변경된 객체를 데이터베이스에 자동으로 기록하지 않습니다.
    bind=db_engine: 앞서 생성한 데이터베이스 엔진에 세션을 바인딩합니다.
    '''
    db_session = sessionmaker(autocommit=False, autoflush=False, bind=db_engine)

    '''
    declarative_base(): SQLAlchemy의 선언적 베이스 클래스를 생성합니다. 이 클래스는 모든 모델 클래스가 상속받을 기본 클래스가 됩니다.
    '''
    Base = declarative_base()

    '''
    get_db: 데이터베이스 세션을 제공하는 제너레이터 함수입니다.
    with db_session() as session: 컨텍스트 매니저를 사용하여 세션을 생성하고, 블록이 종료되면 자동으로 세션을 종료합니다.
    yield session: 세션을 호출자에게 반환합니다. 
    이 함수는 주로 FastAPI의 종속성 주입 시스템과 함께 사용됩니다. 
    FastAPI 엔드포인트 함수는 이 제너레이터를 호출하여 세션을 사용하고, 요청 처리가 끝나면 세션이 자동으로 종료됩니다.
    '''
    def get_db():
        with db_session() as session:
            yield session


5. FastAPI 에 DB 모델을 정의한다.


    # api/models/task.py

    '''
    애플리케이션에서 사용할 테이블을 정의한다.
    Task와 Done의 리소스를 명확히 분리하여 별도의 테이블로 정의한다.

    tasks 테이블과 dones 테이블

    tasks의 레코드는 작업 하나하나에 대응하고
    dones 는 완료된 작업만 해당 Task와 동일한 id의 레코드를 가진다

    테이블 구조를 클래스로 정의하면 SQLAlchemy는 이를 읽거나 저장하는 SQL문을 발행해준다
    '''

    from sqlalchemy import Column, Integer, String, ForeignKey
    from sqlalchemy.orm import relationship

    from api.db import Base


    class Task(Base):
        __tablename__ = "tasks"

        id = Column(Integer, primary_key=True)
        title = Column(String(1024))
        
        '''
        relationship은 테이블(모델 클래스) 간의 관계를 정의한다. 이를 통해 Task 객체에서 Done 객체를 참조하거나 그 반대도 가능해진다.
        참고) SQLAlchemy는 파이썬 객체를 MySQL과 같은 관계형데이터베이스 RDBMS의 데이터 구조로 변환한다.
        cascade="delete" 는 DELETE 라우터 함수에서 Task를 삭제할 때, foreignkey에 지정된 동일한 id의 done이 있으면 자동으로 삭제한다
        '''
        done = relationship("Done", back_populates="task", cascade="delete")

    '''
    DB에 dones 테이블을 만든다.
    용도1:
    클라이언트에서 완료 플래그 포스팅을 요청하면
    dones 테이블에 해당 태스크의 id로 레코드가 있는지 확인 후
    없으면 새 레코드를 만든다
        #api/routers/dones
        @router.put("/tasks/{task_id}/done", response_model=done_schema.DoneResponse)
        async def mark_task_as_done(task_id: int, db: Session = 
        Depends(get_db)):
            done = done_crud.get_done(db, task_id=task_id)
            if done is not None:
                raise HTTPException(status_code=400, detail="Done already exists")

            return done_crud.create_done(db, task_id)
        
        #api/cruds/done.py
        def create_done(db: Session, task_id: int) -> task_model.Done:
            done = task_model.Done(id=task_id)
            db.add(done)
            db.commit()
            db.refresh(done)
            return done
    
    용도2:
    GET 요청이 들어왔을 때
        #api/routers/task.py
        @router.get("/tasks", response_model=list[task_schema.Task])
        async def list_tasks(db: Session = Depends(get_db)):
            return task_crud.get_tasks_with_done(db)
    해당 id인 레코드가 dones 테이블에 있으면 
    done 레이블을 True로 표시하는데 사용
        # api/cruds/task.py
        def get_tasks_with_done(db: Session) -> list[tuple[int, str, bool]]:
            result: Result = db.execute(
                select(
                    task_model.Task.id,
                    task_model.Task.title,
                    task_model.Done.id.isnot(None).label("done"),
                ).outerjoin(task_model.Done)

            )

            return result.all()  
    '''
    class Done(Base):
        __tablename__ = "dones"

        id = Column(Integer, ForeignKey("tasks.id"), primary_key=True)

        task = relationship("Task", back_populates="done")
        
        
        
6. 작성한 ORM 모델을 바탕으로 DB에 테이블을 초기화하는
DB 마이그레이션용 스크립트를 작성한다
이 스크립트는 도커 컨테이너 내에서 실행되기 위해 작성된다.

    # api/migrate_db.py

    from sqlalchemy import create_engine
    from api.models.task import Base

    DB_URL = "mysql+pymysql://root@db:3306/demo?charset=utf8"
    engine = create_engine(DB_URL, echo=True)

    '''
    reset_database: 데이터베이스를 초기화하는 함수입니다.
    Base.metadata.drop_all(bind=engine): Base 클래스의 메타데이터를 사용하여 데이터베이스에 정의된 모든 테이블을 삭제합니다.
    Base.metadata.create_all(bind=engine): Base 클래스의 메타데이터를 사용하여 데이터베이스에 새로운 테이블을 생성합니다. 
    이는 Base 클래스를 상속받는 모든 모델 클래스를 기반으로 테이블을 생성합니다.
    '''
    def reset_database():
        Base.metadata.drop_all(bind=engine)
        Base.metadata.create_all(bind=engine)


    if __name__ == "__main__":
        reset_database()
    
    
7. 다음처럼 DB 마이그레이션용 스크립트를 실행하여
도커 컨테이너의 MySQL에 테이블을 작성한다. 이미 같은 이름의 테이블이 있는 경우 삭제한 후 재작성된다

    sudo docker compose exec demo-app poetry run python -m api.migrate_db

    확인을 위해 DB를 열고
    sudo docker compose exec db mysql demo

    SQL문을 실행해본다
    SHOW TABLES;


CH12 
애플리케이션의 task 리소스에 대한 클라이언트 요청에 대한 DB CRUD 처리 구현 # api/cruds/task.py  

애플리케이션의 done 리소스에 대한 클라이언트 요청 응답 스키마 정의 # api/schemas/done.py
애플리케이션의 done 요청에 대한 DB 작업에 필요한 done 리소스 생성 # api/cruds/done.py 파일 생성 후 DB done CRUD 처리 구현


8. 먼저 DB CRUD에서 create 처리를 구현한다

    # api/cruds/task.py

    '''
    라우터는 MVC (model view controller)의 컨트롤러에 해당한다.
    컨트롤러는 모델이나 뷰를 연결하기 때문에 비대해지기 쉽다
    이를 피하기 위해 DB의 CRUD 처리는 별도의 디렉토리와 모듈에 구현한다
    먼저 DB CRUD에서 create 처리를 구현한다

    create_task 함수는
    task_create 를 인수로 받는다. 이는 task_schema.TaskCreate 스키마를 따른다.
    task_create 를 DB 모델인 task_model.Task 로 변환한다
    DB에 커밋한다
    DB의 데이터를 바탕으로 task를 업데이트 한다.
    생성한 DB 모델을 반환한다
    '''

    def create_task(db: Session, task_create:task_schema.TaskCreate) -> task_model.Task:
        task = task_model.Task(**task_create.dict())
        db.add(task)
        db.commit()
        db.refresh(task)
        return task


9. 이제 #api/routers/task.py 의 POST 함수를 아래와 같이 수정할 수 있다.

    @router.post("/tasks", response_model=task_schema.TaskCreateResponse)
    # async def create_task(task_body: task_schema.TaskCreate):
    async def create_task(task_body: task_schema.TaskCreate, db: Session = Depends(get_db)):
        # return task_schema.TaskCreateResponse(id=1, **task_body.dict())
        return task_crud.create_task(db, task_body) 
        
    재정의된 create_task 함수는 task_model.Task 를 반환한다. 
    이는 api/models/task.py 에 구현된 Task 모델 클래스를 반환한다는 걸 의미한다
    수정 전 반환 값은 TaskCreateResponse 였다.
    api/schemas/task.py 에 구현을 보면
        class TaskCreateResponse(TaskCreate):
            id: int

            class Config:
                orm_mode = True 
    여기서 Config  클래스의 orm_mode=True는
    응답 스키마 TaskCreateResponse 가 
    암묵적으로 ORM(SQLAlchemy)에서 DB 모델의 객체(task_model.Task)를 받아들여, 
    응답 스키마(TaskCreateResponse)로 변환한다는 걸 의미한다.
    따라서 create_task 함수의 반환값이 task_crud.create_task(db, task_body) 로 바뀌어도 
    동작 결과는 그대로 인 것이다.
    이는 내부적으로 TaskCreateResponse를 task_model.Task의 각 필드를 사용해 초기화하여 구현하고 있기 때문이다.

    DB 접속 부분에 의존성 주입을 이용하여 비즈니스 로직과 DB가 밀접하게 결합되는 것을 방지한다
    의존성 주입을 통해 db 인스턴스의 내용을 외부에서 오버라이드 할 수 있으므로
    테스트 수행시 get_db와 다른 연결대상으로 교체하는 등의 작업이 프로덕션 코드를 수정하지 않아도 가능해진다

10. DB CRUD에서 Read 처리를 구현한다

Task를 리스트로 받아오는 Read 엔드 포인트를 생성한다

    애플리케이션에는 Task에 대해 Done 모델이 정의되어 있다.
        # api/models/task.py
        
        class Task(Base):
            __tablename__ = "tasks"

            id = Column(Integer, primary_key=True)
            title = Column(String(1024))
        
        class Done(Base):
            __tablename__ = "dones"

            id = Column(Integer, ForeignKey("tasks.id"), primary_key=True)

            task = relationship("Task", back_populates="done")
        
    Read 를 통해 각각을 개별적으로 가져오는 건 번거로우므로
    이들을 join 하여 TODO 작업에 Done 플래그가 부여된 상태의 리스트를 가져오는 엔드포인트를 만든다
            
        # api/cruds/task.py

        from sqlalchemy.orm import Session

        import api.models.task as task_model
        import api.schemas.task as task_schema

        from sqlalchemy import select
        from sqlalchemy.engine import Result

        def get_tasks_with_done(db: Session) -> list[tuple[int, str, bool]]:
            result: Result = db.execute(
                select(
                    task_model.Task.id,
                    task_model.Task.title,
                    task_model.Done.id.isnot(None).label("done"),
                ).outerjoin(task_model.Done)

            )

            return result.all()  
            
        여기서 Result 인스턴스는 DB 요청의 결과 전체를 가지고 있지 않다.
        DB 레코드를 처리할 때 효율성을 위해 for문 등으로 결과를 가져올 수 있도록 이터레이터로 정의되어 있기 때문이다.
        여기서는 무거운 처리를 하지 않는다는 가정하에 편의상 result.all() 을 호출해 모든 DB를 가져온다. 

        select()로 필요한 필드를 지정하고
        outerjoin()으로 메인 DB모델에 조인할 모델을 지정한다

        task_model.Done.id.isnot(None).label("done")에 의해 Done.id가 존재하면 
        done = True 로, 존재하지 않으면 done = False 로 조인한 레코드를 반환한다.
        
        '''
       get_tasks_with_done 함수는 tasks 테이블과 dones 테이블을 외부 조인하여 
        각 태스크가 완료되었는지 여부를 확인합니다. 
       Done.id.isnot(None).label("done")은 완료된 태스크인지 여부를 boolean 값으로 반환하고, 
        그 결과 컬럼의 이름을 done으로 지정합니다.

       Done.id.isnot(None).label("done") 코드는 SQLAlchemy를 사용하여 
       SQL 쿼리를 생성할 때 컬럼에 조건을 적용하고, 
        결과 컬럼에 별명을 붙이는 방법을 보여줍니다. 이 코드를 단계별로 설명하겠습니다.

       1. Done.id.isnot(None)
        이 부분은 SQLAlchemy에서 Done 테이블의 id 컬럼이 None(즉, NULL)이 아닌지 확인하는 조건을 나타냅니다. 
       SQL에서 이 조건은 id IS NOT NULL에 해당합니다.

       Done.id: Done 테이블의 id 컬럼을 나타냅니다.
       .isnot(None): 이 메서드는 컬럼의 값이 None(NULL)이 아닌지 확인하는 SQL 조건을 생성합니다.

       2. .label("done")
        이 부분은 SQLAlchemy의 ColumnElement 클래스에 속하는 label 메서드를 사용하여 생성된 조건이나 컬럼에 별명을 붙입니다. 
        이 별명은 쿼리 결과를 더 읽기 쉽고 직관적으로 만들기 위해 사용됩니다.

       .label("done"): 이 메서드는 Done.id.isnot(None) 표현식에 "done"이라는 별명을 부여합니다. 
        이는 SQL 쿼리에서 AS done과 같은 역할을 합니다.

        전체 코드 설명
        결합하면, Done.id.isnot(None).label("done")은 다음과 같이 해석할 수 있습니다:

       Done.id IS NOT NULL 조건을 생성합니다.
        이 조건의 결과 컬럼에 "done"이라는 별명을 붙입니다.
        이렇게 생성된 SQL 쿼리는 Done 테이블의 id 컬럼이 NULL이 아닌 레코드를 찾고, 
        이 조건의 결과를 done이라는 이름으로 반환합니다.
        '''

            # api/schemas/task.py
            class Task(TaskBase):
                id: int
                done: bool = Field(False, description="완료 플래그")

                class Config:
                    orm_mode = True
 
11. API의 GET 함수도 수정한다.

        # api/routers/task.py

        # @router.get("/tasks", response_model=list[task_schema.Task])
        # async def list_tasks():
        #     return [task_schema.Task(id=1, title="첫번째 할 일")] 

        @router.get("/tasks", response_model=list[task_schema.Task])
        async def list_tasks(db: Session = Depends(get_db)):
            return task_crud.get_tasks_with_done(db)      
            
            
    이제 Swagger UI에서 GET 을 해보면 
    POST한 개수 만큼의 TODO 리스트가 반환되는데
    "done" 레이블도 부여되어 있는 것을 확인할 수 있다.

    아직 done 리소스의 엔드포인트(#api/routers/done.py 에 대응하는 api/cruds/done.py)를 정의하지 않았기 때문에 false로 나온다.

    [
      {
        "title": "세탁소에 맡긴 옷을 찾으러 가기",
        "id": 1,
        "done": false
      },
      {
        "title": "세탁소에 맡긴 옷을 찾으러 가기",
        "id": 2,
        "done": false
      }
    ]


12. DB CRUD에서 Update 처리를 구현한다

    # api/cruds/task.py

    def get_task(db: Session, task_id: int) -> task_model.Task | None:
        result: Result = db.execute(
            select(task_model.Task).filter(task_model.Task.id == task_id)
        )
        return result.scalars().first()

    먼저 요청에 대해 존재하는 Task에 대한 요청인지 확인

    여기서 Result 인스턴스는 select() 에서 지정한 요소가 하나라도 튜플로 반환되므로
    튜플이 아닌 값으로 가져오는 별도의 코드가 필요하다.
    scalars() 메서드를 사용해 각 행에서 가져올 요소를 1개로 좁혀서 값을 가져온다.



    def update_task(
        db: Session, task_create: task_schema.TaskCreate, original:task_model.Task
    ) -> task_model.Task:
        original.title = task_create.title
        db.add(original)
        db.commit()
        db.refresh(original)
        return original
        

    존재하는 Task에 대한 요청이면
    original 로 DB 모델을 받고
    task_create 로 요청 바디를 받아

    내용을 업데이트 한 후 
    original.title = task_create.title
    db.add(original)
    db.commit()
    db.refresh(original)

    반환한다.


13. DB CRUD update 에 대한 API 라우터 코드도 수정한다

    from fastapi import APIRouter, Depends, HTTPException


    @router.put("/tasks/{task_id}", response_model=task_schema.TaskCreateResponse)
    async def update_task(
        task_id: int, task_body: task_schema.TaskCreate, db: Session = Depends(get_db)
    ):
        task = task_crud.get_task(db, task_id=task_id)
        if task is None:
            raise HTTPException(status_code=404, detail="Task not found")

        return task_crud.update_task(db, task_body, original=task)
        
        
14. DB CRUD에서 Delete 처리를 구현한다

    Update 처리 구현과 비슷하다

    # api/cruds/task.py

    def delete_task(db: Session, original: task_model.Task) -> None:
        db.delete(original)
        db.commit()
        
    # api/routers/task.py

    @router.delete("/tasks/{task_id}", response_model=None)
    async def delete_task(task_id: int, db: Session = Depends(get_db)):
        task = task_crud.get_task(db, task_id=task_id)
        if task is None:
            raise HTTPException(status_code=404, detail="Task not found")

        return task_crud.delete_task(db, original=task)
        

15. DB CRUD Delete 에 대한 API 라우터 수정

    # api/routers/task.py

    # @router.delete("/tasks/{task_id}")
    # async def delete_task():
    #     pass

    @router.delete("/tasks/{task_id}", response_model=None)
    async def delete_task(task_id: int, db: Session = Depends(get_db)):
        task = task_crud.get_task(db, task_id=task_id)
        if task is None:
            raise HTTPException(status_code=404, detail="Task not found")

        return task_crud.delete_task(db, original=task)



16. DB의 done 리소스 정의

    # api/cruds/done.py

    from sqlalchemy import select
    from sqlalchemy.engine import Result
    from sqlalchemy.orm import Session

    import api.models.task as task_model


    def get_done(db: Session, task_id: int) -> task_model.Done | None:
        result: Result = db.execute(
            select(task_model.Done).filter(task_model.Done.id == task_id)
        )
        return result.scalars().first()


    def create_done(db: Session, task_id: int) -> task_model.Done:
        done = task_model.Done(id=task_id)
        db.add(done)
        db.commit()
        db.refresh(done)
        return done


    def delete_done(db: Session, original: task_model.Done) -> None:
        db.delete(original)
        db.commit()
        
17. API done 요청 응답 스키마 정의

클라이언트는 TODO에 완료플래그를 붙이고 싶으면 해당 TODO의 id를 파라미터로 하는 라우트를 요청한다.
ex)
http://localhost:8000/tasks/1/done 

    # api/schemas/done.py

    from pydantic import BaseModel


    class DoneResponse(BaseModel):
        id: int

        class Config:
            orm_mode = True
        
18.  DB의 done CRUD에 대한 API 라우터 수정
    
    # api/routers/done.py

    from fastapi import APIRouter, HTTPException, Depends
    from sqlalchemy.orm import Session

    import api.schemas.done as done_schema
    import api.cruds.done as done_crud
    from api.db import get_db

    router = APIRouter()


    @router.put("/tasks/{task_id}/done", response_model=
    done_schema.DoneResponse)
    async def mark_task_as_done(task_id: int, db: Session = 
    Depends(get_db)):
        done = done_crud.get_done(db, task_id=task_id)
        if done is not None:
            raise HTTPException(status_code=400, detail="Done already exists")

        return done_crud.create_done(db, task_id)


    @router.delete("/tasks/{task_id}/done", response_model=None)
    async def unmark_task_as_done(task_id: int, db: Session = Depends(get_db)):
        done = done_crud.get_done(db, task_id=task_id)
        if done is None:
            raise HTTPException(status_code=404, detail="Done not found")

        return done_crud.delete_done(db, original=done)
