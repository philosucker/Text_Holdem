CH14 유닛테스트

코드의 리그레션을 체크하는 유닛테스트를 작성하는 건 매우 중요하다

regression 회귀 테스트는 
이전에 해결된 오류가 다시 발생하는지 확인하기 위해 실행되는 테스트로
변경된 코드나 기능에서 이전에 수정된 문제가 재현되는지를 검증하여 버그를 발견하고
수정하는 데 사용된다.

1. 준비사항
    (1).
    DB를 중심으로 비동기 처리를 하므로
    테스트도 비동기 처리에 대응해야 한다
    이 책에서는 유닛테스트 프레임워크인 pytest를 비동기용으로 확장하는
    pytest-asyncio를 설치한다

    (2).
    테스트 할때마다 MySQL에 DB를 작성하고 삭제하면 오버헤드가 크다
    여기서는 파일기반의 SQLite를 베이스로 한 SQLite의 온메모리 모드를 사용한다
    이를 위해 SQLite의 비동기 클라이언트로 aiosqlite를 설치한다
    
        SQLite의 온메모리 모드는 데이터베이스를 디스크가 아닌 메모리에 생성하여 매우 빠른 데이터베이스 연산을 가능하게 합니다. 이는 특히 단기간에 많은 데이터베이스 작업을 수행해야 하는 테스트 환경에서 유용합니다. 온메모리 모드는 데이터베이스를 메모리에만 존재하게 하므로, 테스트가 끝나면 데이터베이스가 자동으로 삭제됩니다.

    (3).
    이 장의 유닛테스트에서는 정의한 FastAPI의 함수를 직접호출하지 않고
    HTTP 인터페이스를 사용해 실제 요청과 응답을 검증한다
    이를 위해 필요한 비동기 HTTP 클라이언트 httpx를 설치한다
    
        이 말은 FastAPI 애플리케이션의 유닛 테스트를 작성할 때, FastAPI 함수를 직접 호출하는 대신 실제 HTTP 요청을 보내고 응답을 검증하는 방식을 사용한다는 의미입니다. 이를 통해 애플리케이션의 HTTP 인터페이스가 올바르게 작동하는지 확인할 수 있습니다. 이를 위해 비동기 HTTP 클라이언트인 httpx를 설치하고 사용합니다.

docker compose up 을 실행해 demo-app 이 동작된 상태에서 다음 명령을 실행한다

sudo docker compose exec demo-app poetry add -G dev pytest-asyncio aiosqlite httpx

    여기서 -G는 Poetry의 의존 라이브러리를 그룹화하는 옵션이다
    -G dev 로 그룹을 지정하여 프로덕션 환경의 일반적인 배포에서는 건너뛰는
    테스트나 개발시 로컬환경에서만 사용할 라이브러리를 설치한다
    이를 통해 프로덕션 환경에서는 불필요한 라이브러리를 설치하지 않아도 되고
    컨테이너로 설치하는 경우에도 컨테이너의 이미지 크기를 줄이고 빌드시간을 단축할 수 있다
    pyproject.toml을 확인해보면 
     [tool.poetry.group.dev.dependencies] 에 패키지가 추가된걸 확인할 수 있다

2. 프로젝트 디렉토리에 tests 디렉토리를 작성

# tests/__init__.py
# test/test_main.py

3. pytest의 fixture를 정의한다.
    픽스쳐는 테스트에서 반복적으로 사용되는 설정이나 데이터를 한 곳에 모아 관리하는 개념이다

    픽스쳐는 테스트 함수의 전처리나 후처리를 정의하는 함수로
        전처리: 테스트를 실행하기 전에 필요한 설정이나 초기화 작업을 수행합니다.
        후처리: 테스트가 완료된 후 정리 작업을 수행합니다.
       pytest에서 픽스쳐를 정의하려면 @pytest.fixture 또는 @pytest_asyncio.fixture 데코레이터를 사용합니다. 
        이 데코레이터를 사용하여 픽스쳐 함수를 정의할 수 있습니다. 
        특히, yield 문을 사용하여 전처리와 후처리를 하나의 함수로 묶을 수 있습니다.
    
    여기서는 pytest-asyncio를 사용하므로
    픽스쳐 함수에는 pytest_asyncio.fixture 데코레이터를 부여한다

작업 과정
1) 비동기식 DB 접속용 engine과 session을 작성
2) 테스트 용으로 온메모리 SQLite 테이블을 초기화
3) DI(Dependency Injection) 의존성 주입으로 FastAPI가 테스트용 DB를 참조하도록 변경
4) 테스트용로 비동기 HTTP 클라이언트를 반환

    # tests/test_main.py
    
    import pytest
    import pytest_asyncio
    from httpx import AsyncClient
    from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
    from sqlalchemy.orm import sessionmaker

    from api.db import get_db, Base
    from api.main import app

    ASYNC_DB_URL = "sqlite+aiosqlite:///:memory:"


    @pytest_asyncio.fixture
    async def async_client() -> AsyncClient:
        # 비동기식 DB접속을 위한 엔진과 세션을 작성
        async_engine = create_async_engine(ASYNC_DB_URL, echo=True)
        async_session = sessionmaker(
            autocommit=False, autoflush=False, bind=async_engine, class_=AsyncSession
        )
        
        '''
        테스트용으로 온메모리 SQLite 테이블을 초기화
        데이터베이스 연결을 시작하고, Base.metadata.drop_all을 사용하여 기존 테이블을 삭제합니다.
       Base.metadata.create_all을 사용하여 필요한 모든 테이블을 생성합니다
        '''
        async with async_engine.begin() as conn:
            await conn.run_sync(Base.metadata.drop_all)
            await conn.run_sync(Base.metadata.create_all)

        '''
       FastAPI는 의존성 주입 시스템을 통해 
        경로 함수(endpoint)에서 사용할 객체나 설정을 외부에서 주입받을 수 있습니다. 
        이 시스템을 사용하면 프로덕션 환경과 테스트 환경에서 서로 다른 설정을 쉽게 주입할 수 있습니다
        
        1. 테스트용 데이터베이스 세션 함수 정의
            먼저, 테스트 환경에서 사용할 데이터베이스 세션을 생성하는 함수를 정의합니다. 
            이 함수는 yield 키워드를 사용하여 세션을 반환하고, 함수가 종료될 때 세션을 정리합니다.
           get_test_db 함수는 비동기 세션을 생성하고, 이 세션을 호출자에게 반환합니다. 
           FastAPI의 의존성 주입 시스템을 통해 이 함수를 주입할 수 있습니다.
           
        2. 의존성 오버라이드 설정
       FastAPI 애플리케이션의 dependency_overrides 딕셔너리를 사용하여, 
        특정 의존성을 테스트용 의존성으로 오버라이드할 수 있습니다.
        
       app.dependency_overrides[get_db] = get_test_db
        이 코드는 FastAPI의 의존성 주입 시스템에 다음과 같이 지시합니다:
       get_db 의존성을 호출할 때마다 대신 get_test_db 함수를 호출하라.


        이렇게 하면 FastAPI의 엔드포인트가 호출될 때, 
        기본적으로 프로덕션 데이터베이스 세션을 반환하는 get_db 함수 대신, 
        테스트용 데이터베이스 세션을 반환하는 get_test_db 함수가 사용됩니다.
        
        정리하자면
       get_db 함수는 일반적으로 api/db.py에서 가져오는 함수입니다.
        하지만 픽스쳐에서 app.dependency_overrides[get_db] = get_test_db로 정의함으로써
       FastAPI의 의존성을 테스트용 함수로 오버라이드합니다. 
        덕분에 유닛테스트를 위해 프로덕션 코드인 router의 내용을 다시 작성할 필요가 없습니다. 이것이 바로 의존성 주입의 힘입니다.
        '''
        async def get_test_db():
            async with async_session() as session:
                yield session

        # 의존성 주입으로 FastAPI가 테스트용 DB를 참조하도록 변경
        app.dependency_overrides[get_db] = get_test_db
        
        '''            
        테스트용으로 비동기 HTTP 클라이언트를 반환
       AsyncClient를 사용하여 비동기 HTTP 클라이언트를 생성합니다. 
        이 클라이언트를 통해 FastAPI 애플리케이션에 HTTP 요청을 보낼 수 있습니다.
        '''
        async with AsyncClient(app=app, base_url="http://test") as client:
            yield client

이 모든 설정을 하나의 pytest fixture로 묶음으로써, 테스트마다 반복적으로 설정할 필요 없이 한 번에 설정하고 사용할 수 있습니다.

4. 테스트 함수 작성하기

    import starlette.status


    @pytest.mark.asyncio
    '''
    test_create_and_read 함수의 인수에 async_client 로 방금 정의한
    async_client 픽스쳐를 정의합니다.
    이렇게하면 픽스쳐의 반환값이 들어간 상태에서 함수가 실행되므로
    async_client.post() 와 같이 클라이언트를 이용할 수 있습니다
    여기서는 먼저 POST 호출을 통해 TODO 작업을 생성하고
    이어서 GET 호출을 합니다
    '''
    async def test_create_and_read(async_client):
        response = await async_client.post("/tasks", json={"title": "테스트 작업"})
        assert response.status_code == starlette.status.HTTP_200_OK
        response_obj = response.json()
        assert response_obj["title"] == "테스트 작업"

        response = await async_client.get("/tasks")
        assert response.status_code == starlette.status.HTTP_200_OK
        response_obj = response.json()
        assert len(response_obj) == 1
        assert response_obj[0]["title"] == "테스트 작업"
        assert response_obj[0]["done"] is False

    @pytest.mark.asyncio
    async def test_done_flag(async_client):
        response = await async_client.post("/tasks", json={"title": "테스트 작업2"})
        assert response.status_code == starlette.status.HTTP_200_OK
        response_obj = response.json()
        assert response_obj["title"] == "테스트 작업2"

        # 완료 플래그 설정
        response = await async_client.put("/tasks/1/done")
        assert response.status_code == starlette.status.HTTP_200_OK

        # 이미 완료플래그가 설정되어 있으므로 400 반환
        response = await async_client.put("/tasks/1/done")
        assert response.status_code == starlette.status.HTTP_400_BAD_REQUEST

        # 완료 플래그 해제
        response = await async_client.delete("/tasks/1/done")
        assert response.status_code == starlette.status.HTTP_200_OK

        # 이미 완료플래그가 설정되어 있으므로 404 반환
        response = await async_client.delete("/tasks/1/done")
        assert response.status_code == starlette.status.HTTP_404_NOT_FOUND


5. 테스트 실행

sudo docker compose run --entrypoint "poetry run pytest" demo-app

6. parametrize 테스트의 필요성

    parametrize 테스트는 동일한 테스트를 여러 입력값 또는 조건에 대해 반복하여 실행할 수 있도록 도와준다

    parametrize 테스트는 여러 개의 테스트 케이스를 하나의 함수로 다루고 싶을 때 효과적이다

준비작업1 (달력에 존재하지 않는 날짜를 기입한 경우 처리 방법)
    
6-1) TOTO 에 title 뿐만 아니라 기한도 입력할 수 있게 하자.

    # api/schemas/task.py

    import datetime

    class TaskBase(BaseModel):
        title: str | None = Field(None, json_schema_extra={"example": "세탁소에 맡긴 옷을 찾으러 가기"})

        due_date: datetime.date | None = Field(None, json_schema_extra={"example": "2024-12-01")

6-2) 이후 DB 마이그레이션 스크립트를 실행하면 변경된 정보가 반영된다 (이미 같은 이름의 테이블이 있는 경우 삭제 후 재작성된다)

    sudo docker compose exec demo-app poetry run python -m api.migrate_db

6-3) 새로운 필드에 대응하는 DB 모델과 CRUD를 변경한다.

# api/models/task.py

    from sqlalchemy import Column, Integer, String, ForeignKey, Date
    class Task(Base):
        __tablename__ = "tasks"

        id = Column(Integer, primary_key=True)
        title = Column(String(1024))
        done = relationship("Done", back_populates="task", cascade="delete")
        due_date = Column(Date)
    
# api/cruds/task.py

    async def get_tasks_with_done(db: AsyncSession) -> list[tuple[int, str, bool]]: # aiomysql 설치후
        result: Result = await db.execute(
            select(
                task_model.Task.id,
                task_model.Task.title,
                task_model.Task.due_date,
                task_model.Done.id.isnot(None).label("done"),
            ).outerjoin(task_model.Done)

        )

        return result.all()  


    async def update_task(
        db: AsyncSession, task_create: task_schema.TaskCreate, original: task_model.Task # aiomysql 설치후
     ) -> task_model.Task:
        original.title = task_create.title
        original.due_date = task_create.due_date
        db.add(original)
        await db.commit()
        await db.refresh(original)
        return original

6-4) 테스트 함수 추가

    # tests/test_main.py

    @pytest.mark.asyncio
    async def test_due_date(async_client):
        response = await async_client.post("/tasks", json={"title": "테스트 작업", "due_date": "2024-12-01"})
        assert response.status_code == starlette.status.HTTP_200_OK

6-5) 테스트 실행

    sudo docker compose run --entrypoint "poetry run pytest -k test_due_date" demo-app

    -k 옵션으로 특정 테스트 함수만 지정할 수 있다.

6-7) 의도적으로 테스트 실패

    # tests/test_main.py

    @pytest.mark.asyncio
    async def test_due_date(async_client):
        response = await async_client.post("/tasks", json={"title": "테스트 작업", "due_date": "2024-12-32"})
        assert response.status_code == starlette.status.HTTP_200_OK
        
    sudo docker compose run --entrypoint "poetry run pytest" demo-app

    이렇게 하면  FAILED tests/test_main.py::test_due_date - AssertionError: assert 422 == 200 에러가 난다.

    422오류는 HTTP 상태 코드에서 Unprocessable Entity를 의미하며
    FastAPI에서 정의한 스키마를 위반하여 발생한 오류다

    오류가 발생한 assert 앞에 응답 내용 reponse.content를 출력하도록 변경

    # tests/test_main.py

    @pytest.mark.asyncio
    async def test_due_date(async_client):
        response = await async_client.post("/tasks", json={"title": "테스트 작업", "due_date": "2024-12-32"})
        print(response.content)
        assert response.status_code == starlette.status.HTTP_200_OK

6-8)
새로 추가한 필드에서 유효성 검사가 오류가 발생하는걸 확인했으므로
테스트를 통과하도록 assertion을 422 오류로 변경하고, 방금 추가한 print문은 삭제한다

    # tests/test_main.py

    @pytest.mark.asyncio
    async def test_due_date(async_client):
        response = await async_client.post("/tasks", json={"title": "테스트 작업", "due_date": "2024-12-32"})
        assert response.status_code == starlette.status.HTTP_422_UNPROCESSABLE_ENTITY


준비작업2 (날짜 형식이 잘못된 경우 처리 방법)

6-1) 테스트 자체는 통과하기를 원하므로 응답의 status_code 기대값으로 HTTP_422_UNPROCESSABLE_ENTITY를 지정한다

@pytest.mark.asyncio
async def test_due_date(async_client):

    response = await async_client.post("/tasks", json={"title": "테스트 작업", "due_date": "2024-12-01"})
    assert response.status_code == starlette.status.HTTP_200_OK

    response = await async_client.post("/tasks", json={"title": "테스트 작업", "due_date": "2024-12-32"})
    assert response.status_code == starlette.status.HTTP_422_UNPROCESSABLE_ENTITY

    response = await async_client.post("/tasks", json={"title": "테스트 작업", "due_date": "2024/12/01"})
    assert response.status_code == starlette.status.HTTP_422_UNPROCESSABLE_ENTITY

    response = await async_client.post("/tasks", json={"title": "테스트 작업", "due_date": "2024-1201"})
    assert response.status_code == starlette.status.HTTP_422_UNPROCESSABLE_ENTITY


6-2) 이제 이 테스트에서 네 가지 케이스를 공통화하는 리팩토링을 진행한다

    테스트 코드가 동일한 입출력을 받도록 리팩토링 하려면 다음 과정을 거쳐야 한다

    1) 테스트 케이스간 공통 부분을 확인한다
    2) 입력을 루프로 반복하도록 리스트에 넣는다
    3) 출력도 루프로 반복하도록 리스트에 넣는다
    4) 공통부분을 body로 하여 for문을 만든다

    2)
    @pytest.mark.asyncio
    async def test_due_date(async_client):
        input_list = ["2024-12-01", "2024-12-32", "2024/12/01", "2024-1201"]
        response = await async_client.post("/tasks", json={"title": "테스트 작업", "due_date": input_param})
        assert response.status_code == starlette.status.HTTP_200_OK

        response = await async_client.post("/tasks", json={"title": "테스트 작업", "due_date": input_param})
        assert response.status_code == starlette.status.HTTP_422_UNPROCESSABLE_ENTITY

        response = await async_client.post("/tasks", json={"title": "테스트 작업", "due_date": input_param})
        assert response.status_code == starlette.status.HTTP_422_UNPROCESSABLE_ENTITY

        response = await async_client.post("/tasks", json={"title": "테스트 작업", "due_date": input_param})
        assert response.status_code == starlette.status.HTTP_422_UNPROCESSABLE_ENTITY    

    3)
    @pytest.mark.asyncio
    async def test_due_date(async_client):
        input_list = ["2024-12-01", "2024-12-32", "2024/12/01", "2024-1201"]
        expectation_list = [
            starlette.status.HTTP_200_OK,
            starlette.status.HTTP_422_UNPROCESSABLE_ENTITY,
            starlette.status.HTTP_422_UNPROCESSABLE_ENTITY,
            starlette.status.HTTP_422_UNPROCESSABLE_ENTITY,
        ]
        response = await async_client.post("/tasks", json={"title": "테스트 작업", "due_date": input_param})
        assert response.status_code == expectation

        response = await async_client.post("/tasks", json={"title": "테스트 작업", "due_date": input_param})
        assert response.status_code == expectation

        response = await async_client.post("/tasks", json={"title": "테스트 작업", "due_date": input_param})
        assert response.status_code == expectation

        response = await async_client.post("/tasks", json={"title": "테스트 작업", "due_date": input_param})
        assert response.status_code == expectation

    4)
    @pytest.mark.asyncio
    async def test_due_date(async_client):
        input_list = ["2024-12-01", "2024-12-32", "2024/12/01", "2024-1201"]
        expectation_list = [
            starlette.status.HTTP_200_OK,
            starlette.status.HTTP_422_UNPROCESSABLE_ENTITY,
            starlette.status.HTTP_422_UNPROCESSABLE_ENTITY,
            starlette.status.HTTP_422_UNPROCESSABLE_ENTITY,
        ]
        for input_param, expectation in zip(input_list, expectation_list):
            response = await async_client.post("/tasks", json={"title": "테스트 작업", "due_date": input_param})
            assert response.status_code == expectation


    위와 같이하면 반복을 많이 줄였지만
    단점이 있다
    4개 테스트 케이스는 잘 확인해볼수있지만 케이스 수가 많아지면 코드가 복잡해진다

    이럴때 parametrize 테스트가 사용된다


7. parametrize 테스트 사용방법

parametrize 테스트는 @pytest.mark.parametrize 데코레이터를 전달하면 구현할 수 있다
첫번째 인수에는 루프에서 가져온 변수이름을 문자열로 전달한다. 여기서는 입출력 두가지를 파라미터로 만들고 싶으므로
"input_param, expectation" 을 지정한다
그리고 이 두 파라미터를 한쌍씩 튜플 형태로 만들고, 이를 리스트로 만들어 두번째 인수로 전달한다.
마지막으로 두 변수를 test_due_date() 함수의 인수에 추가한다

parametrize 테스트는 한 테스트케이스의 상태가 다른 테스트 케이스에 의존하는 경우엔 사용할 수 없다

@pytest.mark.asyncio
@pytest.mark.parametrize(
    "input_param, expectation",
    [
        ("2024-12-01", starlette.status.HTTP_200_OK),
        ("2024-12-32", starlette.status.HTTP_422_UNPROCESSABLE_ENTITY),
        ("2024/12/01", starlette.status.HTTP_422_UNPROCESSABLE_ENTITY),
        ("2024-1201", starlette.status.HTTP_422_UNPROCESSABLE_ENTITY),
    ],
)
async def test_due_date(input_param, expectation, async_client):
    response = await async_client.post("/tasks", json={"title": "테스트 작업", "due_date": input_param})
    assert response.status_code == expectation





