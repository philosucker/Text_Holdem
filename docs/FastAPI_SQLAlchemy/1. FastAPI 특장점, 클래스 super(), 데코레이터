Ch1
FastAPI는 마이크로 프레임워크다.
    핵심적인 기능만 가지고 있는(화면을 그리는 것보다 WebAPI를 제공하는데 집중한) 
    작고 강력한 WebAPI Application, 풀스택 프레임워크(Django)의 반대
    경량 웹프레임워크(Flask)

특장점
1. FastAPI를 개발할 때는 요청과 응답의 스키마를 정의하게 된다
    이를 통해 프론트 엔드를 구현할 때 사용할 문서가 자동 생성된다 Swagger UI문서
        Swagger UI는 API의 사양을 알려주는 문서로 REST API를 표현하는 OpenAPI라는 형식으로 돼있다.
        사용자는 이를 통해 API의 엔드포인트 목록을 확인하고, 각각의 엔드 포인트에 대한 세부정보를 시각적으로 살펴볼 수 있다. 
        
    이를 통해 스키마 기반 개발이 자연스럽게 이뤄진다
    스키마 기반 개발 SDD : 개발 전 백엔드/프론트엔드 간에 미리 공통적인 스키마라는 데이터 구조를 정의하는 개발방법

2. 스키마를 명시적으로 정의함으로써 타입 안전 개발이 가능하다

3. ASGI (Asynchronous Server Gateway Interface) 를 지원해 비동기 처리가 가능하다.
    ASGI는 파이썬에서 비동기 웹 애플리케이션을 위한 표준 인터페이스다.
    이는 비동기적인 웹 서버와 애플리케이션을 연결해
    빠르고 실시간으로 작동하는 서비스를 구현할 수 있게 도와준다
    ASGI는 이벤트 기반 처리를 지원해, WebSocket 과 같은 기술을 사용할 수 있게 해주며 
    비동기 처리를 가능하게 한다.

Ch2
FastAPI에서는 스키마를 정의할 때 자체 클래스를 생성한다. ch9, 10 참고
클래스가 가지는 변수 처리에 주의해야 한다

클래스 변수 :
    클래스의 모든 인스턴스에서 공유하는 공통변수
    클래스의 모든 인스턴스가 동일한 값을 공유하며
    객체의 개수와 상관없이 클래스에 속해 하나의 사본만 존재

    class Animal:
        height = 30 # 클래스 변수

    클래스 변수를 쓸 때는 클래스 이름을 지정해 쓰는 게 좋다
        
    animal1 = Animal()
    animal2 = Animal()

    animal1.height == animal2.height

    animal1.height = 10 # 이렇게 하면 클래스 변수를 쓰는게 아니라 
    animal1에 새로 인스턴스 변수 height를 설정한 게 된다 (오버라이드)

    print(animal1.__dict__) # 파이썬에서는 인스턴스 변수가 정의되어 있는 경우 클래스 변수가 숨겨진다. 

    __dict__는 클래스 변수를 표시하지 않기 때문에 
    위 프린트문을 보고 사실은 인스턴스 변수 height이지만 클래스 변수 height라고 헷갈릴 수 있다.

    클래스 변수를 쓸때는 animal1.height가 아니라 Animal.height 와 같이 클래스를 지정하는 게 좋다.
    또 animal1.height = 10 이렇게 인스턴스 변수를 추가하는 행위는 피하고 이니셜라이저를 쓰는게 좋다.

    class Animal:
        def __init__(self):
            self.height = 30
            
부모 클래스의 클래스 변수에 접근하고 싶다면 super()를 호출한다

    class Animal:
        height = 30
        
    class Dog(Animal):
        height = 20
        
        def get_height(self):
            print(super().height)
        
    dog = Dog()
    dog.get_height()
     
데코레이터
데코레이터는 일종의 함수다.
따라서

@wrapper
def func():

과 같이 있을 때

wrapper 함수는 어딘가 정의 되어 있어야 한다

데코레이터로 지정할 함수를 정의해두면 
임의의 함수에 대해 어떤 전처리나 후처리를 할 수 있게 된다

def wrapper(func):
    def _inner(*arg, **kwargs):
        # 전처리
        func(*arg, **kwargs)
        # 후처리
        return
     return _inner
     
즉 위와 같은 코드로 인해
@wrapper
def func():
를 쓸 수 있는 것이다. 

@wrapper
def func():
는 사실 문법적 설탕이다.
이는 wrapper(func)() 이다.

왜냐면 wrapper(func)을 호출하면 _inner가 리턴되고
_inner()를 호출하면
그 바디가 실행되기 때문이다.

