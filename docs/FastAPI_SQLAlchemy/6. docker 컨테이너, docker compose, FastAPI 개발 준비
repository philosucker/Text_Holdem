Ch3

docker 컨테이너란
    애플리케이션 코드와 필요한 라이브러리, 종속 항목 등을 함꼐 패키징하여
    어디서나 실행가능하도록 만든 소프트웨어 실행단위다.
    격리된 환경에서 애플리케이션을 실행하는 기술


docker compose는 Docker 제품 중 하나로
여러 개의 컨테이너를 한꺼번에 다룰 수 있게 해주는 도구다.
    파이썬이 실행되는 운영체제 위에서 실행되는 FastAPI 컨테이너와 
    MySQL 컨테이너를 분리함으로써
    컨테이너 간의 의존관계를 명확히 할 수 있고
    문제가 발생했을 때 해당 컨테이너를 다시 만들거나 폐기하면 되므로
    호스트 머신의 환경을 오염시키지 않는다.

    또 그자체로 어떤 운영체제 위에서든 격리된 상태로 돌릴 수 있다. 제한된 환경을 그대로 프로덕션 환경으로 가져갈 수 있다.

    우분투 도커 설치 참고 https://docs.docker.com/desktop/install/ubuntu/

    설치완료 후

    버전확인
    docker compose version

Ch4 도커 이미지 만들기    

프로젝트 폴더 holdem/FastAPI_SQLAlchemy

1. docker-compose.yaml 파일 준비 : docker-compse 정의 파일, 그 안에서 Dockerfile을 호출하여 Docker 컨테이너를 빌드한다

    services:
      demo-app:
        build: .
        volumes:
          - .dockervenv:/src/.venv
          - .:/src
        ports:
          - 8000:8000  # 호스트 머신의 8000번 포트를 docker의 8000번 포트에 연결
        environment:
          - WATCHFILES_FORCE_POLLING=true  # 핫 리로드
      
2. Dockerfile 준비 : Docker 정의 파일, 사용할 공개 이미지를 가져와 Poetry를 통해 패키지 정의 파일인 pyproject.toml을 기반으로 각 파이썬 패키지를 설치한다

    # python3.11 이미지 다운로드
    FROM python:3.11-buster
    # python의 출력 표시를 도커용으로 조절
    # Python 출력이 버퍼링되지 않도록 설정하여 실시간으로 로그를 볼 수 있게 합니다.
    ENV PYTHONUNBUFFERED=1
        # 작업 디렉토리를 /src로 설정합니다. 이 디렉토리는 이후의 모든 명령이 실행될 기본 디렉토리입니다.
    WORKDIR /src

    # pip를 사용하여 poetry를 설치합니다. poetry는 Python 패키지 관리를 위한 도구입니다.
    RUN pip install poetry

    # (존재하는 경우) 현재 디렉토리에서 pyproject.toml 및 poetry.lock 파일을 컨테이너의 작업 디렉토리(/src)로 복사합니다. 
    # 이 파일들은 poetry가 프로젝트의 종속성을 관리(패키지간 의존성 관리)하는 데 사용됩니다.
    COPY pyproject.toml* poetry.lock* ./

    # poetry가 가상 환경을 프로젝트 디렉토리 안에 생성하도록 설정합니다.
    RUN poetry config virtualenvs.in-project true
    # pyproject.toml 파일이 존재할 경우, poetry를 사용하여 프로젝트의 종속성을 설치합니다. --no-root 옵션은 패키지를 루트로 설치하지 않도록 합니다.
    RUN if [ -f pyproject.toml ]; then poetry install --no-root; fi

    # 컨테이너가 시작되면 poetry를 사용하여 uvicorn 서버를 실행합니다. 
    # api.main:app은 api 디렉토리의 main 모듈에 정의된 FastAPI 애플리케이션 객체를 가리킵니다. 
    # 서버는 0.0.0.0 호스트에서 실행되며, --reload 옵션은 소스 코드 변경 시 자동으로 서버를 다시 시작하도록 합니다.
    ENTRYPOINT ["poetry", "run", "uvicorn", "api.main:app", "--host", "0.0.0.0", "--reload"]
    
3. Docker 내에 .venv 디렉토리에 대응하는 .dockervenv 디렉토리를 생성한다

4. 이미지 빌드
    도커파일이 있는 디렉토리로 이동해 도커 이미지를 생성한다

    sudo docker compose build   


Ch5 FastAPI 설치

5. Docker Compose를 사용하여 위에서 만든 컨테이너 안에서 
Poetry로 FastAPI를 설치하기 위해 의존성을 설명하는 pyproject.toml을 작성한다

    pyproject.toml: Poetry가 의존성 관리를 위해 사용하는 파일. 
        Poetry는 pyproject.toml, poetry.lock 두 파일로 패키지를 관리한다.
            Poetry는 파이썬의 패키지 관리 도구로, 패키지 간의 의존관계를 해결해 준다.
            poetry는 pyproject.toml 파일로 의존성을 정의하고, poetry.lock 파일로 설치된 의존성을 고정한다. 
              또 파이썬의 가상 환경 관리 등을 지원한다
                   반면, pip는 별도의 가상 환경 설정 도구(virtualenv 등)를 사용해야 합니다.
                pip에서는 requirements.txt에만 의존하고 의존성 잠금 파일이 없으므로 설치 시 해당 패키지의 최신 하위 의존성을 가져옵니다. 
                   즉 설치 시마다 하위 의존성 버전이 달라질 수 있습니다.

    
    
    sudo docker compose run \
    --entrypoint "poetry init \
        --name demo-app \
        --dependency fastapi \
        --dependency uvicorn[standard]" \
    demo-app

    위 명령어는 방금 만든 도커 컨테이너 demo-app 안에서 기본 엔트리포인트를 무시하고, poetry init 명령어를 실행한다
    인수로 fastapi와 AGSI 서버인 uvicorn 을 설치할 의존 패키지로 지정한다
    
    docker compose run 명령어는 특정 서비스를 일회성으로 실행하는 데 사용됩니다. 
    이 명령어는 일반적으로 단일 작업을 수행하기 위해 임시 컨테이너를 시작하는 데 사용됩니다.
     예를 들어, 데이터베이스 마이그레이션을 수행하거나 특정 명령을 실행할 때 사용됩니다.
     
     docker compose up: 
     개발 환경에서 애플리케이션 전체를 실행하고, 웹 서버, 데이터베이스 등을 모두 시작하고 싶을 때 사용합니다.
    docker compose run: 
    특정 작업(예: 데이터베이스 마이그레이션)을 위해 임시로 컨테이너를 실행하고 싶을 때 사용합니다.

6. Docker Compose를 사용하여 위에서 만든 컨테이너 안에서 
poetry로 fastapi 및 필요한 패키지를 설치한다 

    sudo docker compose run --entrypoint "poetry install --no-root" demo-app
    
    위 명령어에서 poetry install: 이 명령어를 실행하면, pyproject.toml 파일에 정의된 모든 의존성과 함께 프로젝트 자체가 가상 환경에 설치됩니다
    --no-root: 이 명령어를 실행하면, pyproject.toml 파일에 정의된 의존성들만 가상 환경에 설치되고, 프로젝트 자체는 설치되지 않습니다.

7. 로컬 개발환경이 vscode일 때 Dev Containers 구조를 사용해 도커 컨테이너 내의 파일을 직접 편집할 수 있게 한다.


8. fastapi 개발 준비

    프로젝트 디렉토리인 
    holdem/FastAPI_SQLAlchemy 폴더 내에 

    api 디렉토리를 생성하고 
    __init__.py 파일을 추가한다. 이 파일은 api 디렉토리가 파이썬 모듈임을 나타내는 파일이다.

    holdem/FastAPI_SQLAlchemy/api 폴더 내에 
    main.py 를 생성하고 아래 코드를 입력한다

    from fastapi import FastAPI

    app = FastAPI()


    @app.get("/hello")
    async def hello():
        return {"message": "hello world!"}
    
9. API 실행

프로젝트 디렉토리에서 다음 명령어를 실행해 API를 실행한다

sudo docker compose up

    foreground에서 서버가 실행된 상태가 된다.
        foreground란 사용자가 직접적으로 상호작용하는 프로세스나 작업을 가리킨다.
        
        sudo docker compose up 명령어는 다음과 같은 작업을 수행합니다:

        Docker Compose 도구 실행: docker compose를 사용하여 Docker Compose를 실행합니다.
        서비스 시작: up 하위 명령어를 사용하여 docker-compose.yml 파일에 정의된 모든 서비스를 빌드하고 시작합니다. 이 과정에서 필요한 이미지를 빌드하고, 컨테이너를 생성하여 실행하며, 정의된 네트워크와 볼륨을 생성합니다.

이 상태에서 http://localhost:8000/docs 에 접속한다.

        그러면 GET /hello  라는 엔드포인트가 나타난다. 
            엔드포인트란 API에서 요청을 받아들이고, 그에 따른 응답을 반환하는 지점을 가리킨다.
            간단히 말해 API를 호출할 때, 그 호출이 도착하는 목적지다.
        엔드포인트는 일종의 URL로 표현되며 이 URL을 통해 API클라이언트가 API 서버에 접근하고, 특정한 작업을 수행하거나 데이터를 가져올 수 있다.


        API 응답은 기본적으로 JSON 형식으로 반환된다
        이 외에도 HTMLResponse, FileResponse 등 다양한 응답 형식을 지원한다

    즉 아래 명령어로 http://localhost:8000/hello 의 API를 호출하면    
    curl -X 'GET' \
      'http://localhost:8000/hello' \
      -H 'accept: application/json'

    아래 응답을 얻는다
    {
      "message": "hello world!"
}


main.py 에는 if __name__ == "__main__": 이 없지만
컨테이너를 빌드할 때 사용한 도커파일에 의해 
컨테이너가 시작되면 자동으로 Uvicorn 서버가 실행됩니다.

        Dockerfile의 ENTRYPOINT 설정은 컨테이너가 시작될 때 실행할 기본 명령을 지정합니다. 아래 예시를 다시 살펴보겠습니다:
        ENTRYPOINT ["poetry", "run", "uvicorn", "api.main:app", "--host", "0.0.0.0", "--reload"] 
        이 설정은 컨테이너가 시작될 때 다음 명령을 실행하게 만듭니다:
        poetry run uvicorn api.main:app --host 0.0.0.0 --reload
        
    즉 main.py에 다음 코드를 추가 하고 
    if __name__ == "__main__":
        import uvicorn
        uvicorn.run(app, host="0.0.0.0", port=8000, reload=True)
    터미널에서 python main.py를 실행한 것과 같다
    

