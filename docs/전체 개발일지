
기술 스택 설정

백엔드: FastAPI (웹 프레임워크)
클라이언트: Unity (게임 엔진)
데이터베이스: MySQL, mongoDB
강화학습 프레임워크: PyTorch

1. 백엔드 개발
    FastAPI reception 서버1 개발
        유저 인증 및 관리(회원 가입, 로그인) 라우트 작성
        클라이언트가 서버1에서 로그인하여 JWT를 받습니다.
        클라이언트는 이후 모든 요청에 JWT를 포함시켜 서버2와 서버3에 요청을 보냅니다.
        서버2와 서버3은 JWT를 검증하여 요청이 인증된 사용자인지 확인합니다.
    DB 모델 작성(유저 계정)
    
    dealer 로직
    
    FastAPI dealer 서버3 개발
        유저 상태 관리, 테이블 상태 보고, 유저 게임 정보 보고 라우트 작성
    DB 모델 작성 (유저 스택 사이즈, 유저 게임 로그, 테이블 상태)
    
    FastAPI websocket 서버4 개발
    
    FastAPI floor 서버2 개발
        유저 게임 정보 관리, 테이블 관리 라우트 작성
    DB 모델 작성(유저 스택사이즈, 유저 게임 로그, 테이블 상태)
    
        
2. 클라이언트 개발

    유니티 프로젝트 초기화
    유니티와 FastAPI 간의 통신을 위한 HTTP 클라이언트 설정
        UnityWebRequest 사용
        로그인, 회원가입, 테이블 생성 및 참여 등의 API 엔드 포인트와 통신하는 스크립트 작성

    게임 진행 시각화를 위한 애니메이션 및 그래픽 요소 구현
        사용자 인터페이스 디자인
        로그인 화면, 로비 화면, 게임 화면 디자인
            
        게임 상태를 관리하는 스크립트 작성
            서버로부터 받은 게임데이터를 사용해 UI 업데이트

3. 강화학습 에이전트 개발

    강화학습 환경 설정
    에이전트 훈련
    FastAPI agent 서버 개발
    훈련된 모델을 FastAPI agent 서버5에 로드
    게임 진행 중 에이전트의 액션을 호출해 게임에 반영
        dealer 서버로부터 가능한 액션을 전달 받으면
        agent 서버 API로 AI 에이전트의 행동을 요청하고 결과를 받아오는 유니티 스크립트 작성

4. 통합 및 테스트
    서버와 클라이언트를 통합해 전체 시스템 엔드 투 엔드 테스트
        서버 성능, 네트워크 지연 시간, 클라이언트 반응 속도 테스트
    사용자와 AI간의 상호작용 테스트

    서버 성능 및 클라이언트 렌더링 최적화
    강화학습 에이전트의 응답속도 최적화

5. 배포
    서버를 클라우드 서비스 AWS, GCP 등에 배포
    클라이언트를 스마트폰 앱 등으로 빌드하고 배포
    지속적인 통합 및 배포(CI/CD)
    깃헙 액션, 젠킨스 등을 사용해 자동화된 빌드 및 배포 파이프라인 설정 
