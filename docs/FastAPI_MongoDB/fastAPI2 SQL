책 챕터6 데이터베이스 연결

위에서 구현한 플래너 애플리케이션은 이벤트 데이터를 저장하기 위해 내장 데이터 베이스를 사용하고 있다.
내장 DB의 경우 애플리케이션을 재시작하면 데이터가 모두 지워지기 때문에
외부 DB를 쓰는 게 좋다.


SQLModel 설정

먼저 SQLModel을 사용해 SQL DB의 CRUD 처리를 해보고 (Create, Read, Update, Delete)
Beanie를 사용해  MongoDB의 CRUD를 처리해본다.


SQLModel 라이브러리를 설치해서
SQL DB와 플래너 애플리케이션을 연동한다.

pip install sqlmodel


SQLModel 라이브러리는 FastAPI 개발자가 만들었으며
pydantic과 SQLAlchemy를 기반으로 한다.


chatGPT
	SQLModel 라이브러리는 Python에서 SQL 데이터베이스와 상호작용하기 위한 도구로, 
	Pydantic의 데이터 검증 및 SQLAlchemy의 ORM 기능을 결합한 라이브러리입니다. 
	이 라이브러리는 SQL 데이터베이스를 다루기 위한 것이며, 
	MongoDB와 같은 NoSQL 데이터베이스를 지원하지 않습니다. 

	SQL 데이터베이스와 MongoDB의 차이점

	1. 데이터 모델링 및 스키마
	
		SQL 데이터베이스:
		  - 정형 데이터: 데이터가 고정된 스키마를 따릅니다.
		  테이블, 열, 데이터 타입 등이 명확히 정의되어 있습니다.
		  - 관계형 모델: 데이터가 테이블 간의 관계를 통해 저장되며,
		  외래 키를 사용하여 데이터 간의 참조를 관리합니다.

		MongoDB:
		  - 비정형 데이터: 데이터는 고정된 스키마 없이 저장됩니다. 
		  문서(Document) 형식으로 저장되며, 
		  각 문서는 JSON과 유사한 BSON 형식을 사용합니다.
		  - 유연한 스키마: 문서마다 다른 필드를 가질 수 있으며, 
		  데이터 구조가 자주 변경될 수 있습니다.

	2. 데이터 저장 방식

		SQL 데이터베이스:
		  - 테이블: 행과 열로 구성된 테이블에 데이터를 저장합니다.
		  - 스키마 엄격성: 스키마가 엄격히 정의되어 있어 데이터 무결성을 보장합니다.

		MongoDB:
		  - 컬렉션(Collection): 테이블 대신 컬렉션에 문서를 저장합니다.
		  - 스키마 유연성: 문서마다 다른 구조를 가질 수 있으며, 
		  필드의 추가나 변경이 자유롭습니다.

	3. 쿼리 언어

		SQL 데이터베이스:
		  - SQL (Structured Query Language):  
		  조회, 삽입, 업데이트, 삭제하는 데 사용되는 표준화된 언어입니다.
		  
		- MongoDB:
		  - MongoDB 쿼리 언어: 
		  JSON 형식의 쿼리 언어를 사용하여 데이터를 조회, 삽입, 업데이트, 삭제합니다.

	4. 확장성

		- SQL 데이터베이스:
		  - 수직적 확장: 일반적으로 서버의 성능을 향상시키는 방식으로 확장합니다 
		  (예: 더 강력한 CPU, 더 많은 RAM).
		  - 수평적 확장 어려움: 데이터를 여러 서버에 분산하는 것이 복잡할 수 있습니다.

		- MongoDB:
		  - 수평적 확장: 샤딩(Sharding)을 통해 데이터를 여러 서버에 분산하여 확장합니다. 
		  대규모 데이터와 높은 트래픽 처리에 유리합니다.
		  
		  SQL 데이터베이스가 수직적 확장은 용이하지만 
		  수평적 확장은 어려운 이유는 몇 가지로 요약될 수 있습니다:

			수직적 확장
			수직적 확장은 서버의 성능을 향상시키는 방식으로, 
			더 강력한 하드웨어를 추가하여 성능을 높이는 방법입니다. 
			이 방식은 상대적으로 간단합니다.

			하드웨어 업그레이드: 
			CPU, 메모리, 스토리지 등을 업그레이드하는 것은 직접적이며 즉각적인 성능 향상을 가져옵니다.
			운영 간소화: 한 대의 서버에서 모든 데이터베이스 작업을 처리하므로 관리가 용이합니다.
			일관성 유지: 단일 서버에서 모든 데이터를 관리하므로 데이터 일관성 문제를 쉽게 해결할 수 있습니다.
			
			수평적 확장 어려움
			수평적 확장은 데이터를 여러 서버에 분산하여 확장하는 방식입니다. 
			이 방식은 복잡한 이유가 여러 가지 있습니다.

			데이터 샤딩: 데이터를 여러 서버에 분산시키기 위해 샤딩을 해야 하는데,
			이는 데이터를 어떻게 나눌지, 각 서버가 어떤 데이터를 가질지를 정의하는 복잡한 작업입니다.
			일관성 문제: 분산된 환경에서는 데이터 일관성을 유지하기가 어렵습니다. 
			여러 서버 간의 동기화 및 트랜잭션 관리가 복잡해집니다.
			네트워크 오버헤드: 여러 서버 간의 데이터 통신이 필요하므로 네트워크 오버헤드가 발생할 수 있습니다.
			복잡한 쿼리 처리: 조인 연산이나 복잡한 쿼리를 여러 서버에서 처리하려면 성능이 저하될 수 있으며, 
			이를 효율적으로 처리하기 위해 추가적인 설계가 필요합니다.
			관리 복잡성: 여러 서버를 관리하고 모니터링하는 것은 
			단일 서버를 관리하는 것보다 훨씬 복잡합니다.
			
			이와 같은 이유로 
			SQL 데이터베이스는 수평적 확장보다 수직적 확장이 더 용이하게 느껴집니다. 
			
			반면에 NoSQL 데이터베이스는 처음부터 수평적 확장을 염두에 두고 설계된 경우가 많아 
			이러한 문제를 상대적으로 쉽게 해결할 수 있습니다.

	결론

	- SQLModel은 SQL 데이터베이스와 상호작용하기 위한 라이브러리로, 
	Pydantic과 SQLAlchemy의 기능을 결합합니다.
	- SQL 데이터베이스는 정형 데이터를 위한 고정된 스키마와 관계형 모델을 사용하며, SQL 언어를 사용합니다.
	
	- MongoDB는 비정형 데이터를 위한 유연한 스키마와 문서 지향 모델을 사용하며, JSON 형식의 쿼리 언어를 사용합니다.
	- SQLModel은 SQL 데이터베이스 전용 도구로, MongoDB와 같은 NoSQL 데이터베이스는 지원하지 않습니다. 
	MongoDB와 상호작용하려면 PyMongo와 같은 라이브러리를 사용해야 합니다.




	PyMongo와 Beanie는 둘 다 MongoDB와 상호작용할 수 있는 Python 라이브러리이지만, 
	목적과 사용 사례에 따라 적합한 선택이 달라질 수 있습니다. 
	각각의 장단점을 살펴보고, 어떤 상황에서 더 적합한지 비교해 보겠습니다.

	PyMongo

		#### 장점
		1. 기본 라이브러리: PyMongo는 MongoDB를 위한 공식 Python 드라이버로, 
		MongoDB와의 기본적인 상호작용을 지원합니다.
		2. 유연성: MongoDB의 모든 기능을 사용할 수 있으며, 
		데이터베이스 운영에 대해 매우 세밀한 제어가 가능합니다.
		3. 성숙도: 오랜 기간 유지되어 온 성숙한 라이브러리로, 
		광범위한 문서와 커뮤니티 지원을 받습니다.

		#### 단점
		1. 추상화 부족: 
		ORM(Object-Relational Mapping)이나 ODM(Object-Document Mapping)을 제공하지 않으므로, 
		데이터 모델링과 관련된 많은 코드를 직접 작성해야 합니다.
		2. 사용 편의성: 데이터 검증, 스키마 관리, 자동화된 마이그레이션 등을 직접 구현해야 합니다.

	Beanie
		#### 장점
		1. ODM(Object-Document Mapping): 
		Beanie는 Pydantic을 기반으로 한 MongoDB ODM으로, 데이터 모델링, 검증, 쿼리 등을 쉽게 처리할 수 있습니다.
		2. 자동화된 마이그레이션: Beanie는 데이터베이스 스키마 변경 시 자동 마이그레이션 기능을 제공합니다.
		3. 사용 편의성: Pydantic의 유효성 검사와 SQLAlchemy와 비슷한 ORM 스타일의 사용 편의성을 제공합니다.
		4. 비동기 지원: 비동기 기능을 기본적으로 지원하여, 비동기 환경에서의 성능을 극대화할 수 있습니다.

		#### 단점
		1. 상대적인 신*: PyMongo에 비해 상대적으로 덜 성숙했으며, 문서와 커뮤니티 지원이 상대적으로 적을 수 있습니다.
		2. 추상화 수준: 더 높은 수준의 추상화를 제공하므로, MongoDB의 모든 기능을 세밀하게 제어하기 어려울 수 있습니다.




	비교 및 결론

	- PyMongo:
	  - 장점: MongoDB의 모든 기능에 대한 세밀한 제어, 성숙도와 커뮤니티 지원.
	  - 적합한 경우: MongoDB의 세부 기능을 모두 사용해야 하거나, 이미 익숙한 경우.

	- Beanie:
	  - 장점: Pydantic 기반의 데이터 검증, 높은 추상화 수준, 비동기 지원, 자동 마이그레이션.
	  - 적합한 경우: 데이터 모델링과 검증을 간단히 처리하고, 비동기 환경을 활용하려는 경우.

	### 결론
	- PyMongo: MongoDB와의 상호작용을 최대한 세밀하게 제어하고 싶을 때, 그리고 성숙한 라이브러리를 사용하고자 할 때 적합합니다.
	- Beanie: 데이터 모델링과 검증을 간단히 처리하고, 비동기 환경에서의 성능을 극대화하고자 할 때 적합합니다.

	프로젝트의 요구사항과 개발자 경험에 따라 PyMongo와 Beanie 중 적절한 라이브러리를 선택하면 됩니다.
	
	






1. SQLModel 테이블 모델 클래스 설정
	# models/events.py 수정

	from typing import Optional, List # Optional 추가
	from sqlmodel import JSON, SQLModel, Field, Column # 추가

	'''
	SQLModel을 사용해 테이블을 생성하려면 테이블 모델 클래스를 먼저 정의해야 한다.
	Pydantic 모델처럼 테이블을 정의하지만 SQLModel의 서브클래스로 정의한다
	클래스 정의는 table이라는 설정변수를 갖는다. 
	이 변수를 통해 해당 클래스가 SQLModel 테이블이라는 걸 인식한다.

	모델 클래스 안에 정의된 변수는 따로 지정하지 않으면 기본 필드로 설정된다.
	만약 필드의 특성을 지정하고 싶다면 Filed() 함수를 사용하면 된다.
	'''

	class Event(SQLModel, table = True): # 이하 수정
		id: Optional[int] = Field(default=None, primary_key=True)
		title: str
		image: str
		description: str
		tags: List[str] = Field(sa_column=Column(JSON))
		'''
		sa_column=Column(JSON)는 SQLModel의 Field에서 
		SQLAlchemy의 Column 객체를 사용하여 필드의 데이터 타입을 지정합니다. 
		여기서 JSON 타입을 사용하여 필드를 JSON 형식으로 저장하도록 설정합니다.
		JSON 타입을 사용하면 배열이나 복잡한 객체 구조를 필드에 저장할 수 있습니다.
		'''
		location: str

		class Config:  # 이하 동일
		    json_schema_extra = {
		        "example": {
		            "title": "FastAPI Book Launch",
		            "image": "https://linktomyimage.com/image.png",
		            "description": "We will be discussing the contents of the FastAPI book in this event.Ensure to come with your own copy to win gifts!",
		            "tags": ["python", "fastapi", "book", "launch"],
		            "location": "Google Meet"
		        }
		    }
        
2. 업데이트 처리의 바디 유형으로 사용할 SQLModel 클래스 추가

	class EventUpdate(SQLModel): # 추가
		title: Optional[str] = Field(default=None)
		image: Optional[str] = Field(default=None)
		description: Optional[str] = Field(default=None)
		tags: Optional[List[str]] = Field(default=None)
		location: Optional[str] = Field(default=None)
		'''
		모든 필드에 기본값 None을 추가했습니다. 
		이렇게 하면 PATCH 요청에서 일부 필드를 생략할 수 있으며, SQLModel은 이를 허용합니다.
		PATCH 요청을 실행하면 필요한 필드만 업데이트되고, 나머지 필드는 그대로 유지됩니다. 
		'''
		class Config: 
		    json_schema_extra = {
		        "example": {
		            "title": "FastAPI Book Launch",
		            "image": "https://linktomyimage.com/image.png",
		            "description": "We will be discussing the contents of the FastAPI book in this event.Ensure to come with your own copy to win gifts!",
		            "tags": ["python", "fastapi", "book", "launch"],
		            "location": "Google Meet"
		        }
		    }
        
        
3. 데이터베이스 및 테이블 생성을 위한 설정 작성

	/database/connection.py 생성 

	# connection.py

	from sqlmodel import SQLModel, Session, create_engine
	from models.events import Event  # 명시적 임포트

	'''
	create_engine() : SQLModel은 SQLAlchemy 엔진을 사용해 데이터베이스를 연결합니다. 
	이를 위해 create_engine() 메서드를 사용합니다.
	create_engine()은 데이터베이스 URL을 인수로 사용합니다. 
	URL은 sqlite:///database.db 또는 sqlite:///database.sqlite와 같은 형식입니다.
	인자로 echo=True를 설정하면 실행된 SQL 명령이 출력됩니다.

	SQLModel.metadata.create_all() : create_engine() 메서드만으로는 데이터베이스 파일을 만들 수 없습니다.
	create_all() 메서드를 사용해 create_engine() 메서드의 인스턴스를 호출해야 합니다.
	SQLModel.metadata.create_all(engine_url)을 호출할 때, 
	SQLModel은 데이터베이스뿐만 아니라 현재 활성화된 모든 모델을 탐색하여 테이블을 생성합니다.
	따라서 from models.events import Event를 하지 않아도 문제는 없습니다.
	하지만 명시적으로 모델을 임포트하면, 
	해당 모델이 반드시 포함된다는 보장을 얻을 수 있습니다. 
	이는 특히 대규모 프로젝트에서 중요한 관례입니다.
	'''

	database_file = "planner.db"
	database_connection_string = f"sqlite:///{database_file}"
	connect_args = {"check_same_thread": False}
	'''
	connect_args = {"check_same_thread": False} : 
	SQLite 데이터베이스 연결 시 사용하는 인수로, 
	동일한 스레드에서만 데이터베이스 연결을 사용할 수 있는 기본 동작을 무시하고 
	다른 스레드에서도 동일한 연결을 사용할 수 있도록 허용합니다. 
	이 설정은 SQLite를 사용하면서 FastAPI와 같은 비동기 웹 프레임워크에서 데이터베이스 연결을 공유해야 할 때 유용합니다.
	'''
	engine_url = create_engine(database_connection_string, echo=True, connect_args=connect_args)

	def conn(): # main.py 에서 사용, SQLModel을 사용해서 DB와 테이블 생성
		SQLModel.metadata.create_all(engine_url) 

	'''
	세션은 데이터베이스와의 논리적인 연결로, 데이터베이스 작업을 그룹화하고 트랜잭션을 관리합니다.
	세션은 데이터베이스에 대한 여러 작업(예: 쿼리, 삽입, 업데이트, 삭제)을 그룹화하고, 
	이러한 작업들을 트랜잭션 단위로 처리할 수 있게 해줍니다.
		세션의 역할
		트랜잭션 관리: 세션은 트랜잭션을 관리합니다. 여러 SQL 명령어를 하나의 트랜잭션으로 묶어 데이터베이스 일관성을 유지할 수 있습니다.
		연결 관리: 세션은 데이터베이스 연결을 효율적으로 관리합니다. 필요한 경우 연결을 열고, 사용이 끝나면 닫습니다.
		변경 추적: 세션은 객체의 변경 사항을 추적하고, 이를 데이터베이스에 반영합니다.
		쿼리 실행: 세션을 통해 데이터베이스에 쿼리를 실행하고, 결과를 반환받을 수 있습니다.

	Session 클래스는 SQL 엔진의 인스턴스(여기서는 engine_url)를 인수로 사용합니다.

	세션 생성 및 사용: Session 클래스를 사용하여 세션을 생성하고, 
	FastAPI 라우트 함수에서 Depends를 사용해 세션을 주입하여 데이터베이스 작업을 수행합니다.
		1. 의존성 주입 (Dependency Injection):
		    Depends는 FastAPI에서 의존성을 주입하는 데 사용되는 함수입니다.
		    Depends(get_session)를 사용하여 라우트 함수에 get_session을 의존성으로 주입합니다.
		    FastAPI는 Depends를 통해 get_session 함수를 호출하고, 
		       생성된 세션 객체를 라우트 함수의 인자로 전달합니다.
		       
				의존성 주입은 '함수를 호출할 때마다' 필요한 의존성을 외부에서 주입받는 방식입니다.

		2. 세션 주입:
		    데이터베이스 세션을 라우트 함수에 주입합니다.
		    세션은 데이터베이스와의 연결을 관리하며, 데이터베이스 작업(쿼리, 삽입, 삭제 등)을 수행할 수 있도록 합니다.
		    각 라우트 함수(retrieve_all_events, create_event, delete_event)에서 
		    session 인자를 사용하여 데이터베이스 작업을 수행합니다.
		    예를 들어, retrieve_all_events 함수는 세션을 사용하여 이벤트 목록을 조회하고, 
		    create_event 함수는 새로운 이벤트를 데이터베이스에 추가하며, 
		    delete_event 함수는 특정 이벤트를 삭제합니다.

	get_session 함수는 Session 객체를 생성하여 데이터베이스와의 세션을 관리합니다. 
	create_engine()으로 생성된 engine_url을 Session 클래스의 인자로 사용하여 세션을 생성합니다. 
	yield 키워드를 사용하여 생성된 세션을 반환하고, 세션의 생명주기가 끝나면 자동으로 세션을 닫습니다.

	세션 클래스의 주요 메서드 (routes/event.py에서 사용):
	add(): 처리 대기 중인 DB 객체를 메모리에 추가합니다.
	commit(): 현재 세션에 있는 트랜잭션을 모두 커밋합니다.
	get(): DB에서 단일 로우를 추출합니다.
	'''

	def get_session(): # routes/event.py 에서 사용, DB 세션을 애플리케이션 내에서 유지
		with Session(engine_url) as session:
		    yield session
		    
		    
4. 메인 파일 수정

	# main.py 수정
	from fastapi import FastAPI
	from fastapi.responses import RedirectResponse

	from contextlib import asynccontextmanager # 추가
	from database.connection import conn, engine_url  # 추가

	from routes.users import user_router
	from routes.events import event_router

	import uvicorn

	app = FastAPI()

	# 사용자 및 이벤트 라우터 등록
	'''
	prefix 인자는 FastAPI의 include_router 메서드에서 사용되며, 
	라우터에 포함된 모든 경로 앞에 공통 경로 접두사를 추가합니다. 
	이는 애플리케이션의 경로 구조를 더 쉽게 관리하고, 모듈화를 도와줍니다.
	'''
	app.include_router(user_router,  prefix="/user")
	app.include_router(event_router, prefix="/event")

	# @app.on_event("startup") # depricated
	# def on_startup():
	#     conn()
	'''
	@asynccontextmanager 데코레이터를 사용한 lifespan 함수는 
	FastAPI 애플리케이션의 수명 주기 동안 특정 작업을 수행하기 위해 사용됩니다.
	@asynccontextmanager를 사용하여 lifespan 함수를 정의할 때, 
	yield를 사용하면 함수의 앞부분은 애플리케이션이 시작될 때 실행되고,
	yield 다음에 오는 코드는 애플리케이션이 종료될 때 실행됩니다.
	@asynccontextmanager는 비동기 컨텍스트 관리자 생성기 함수입니다.
	비동기 컨텍스트 관리자 함수는 yield를 사용하여 진입 및 종료 지점을 정의합니다.
	'''
	@asynccontextmanager
	async def lifespan(app: FastAPI):
		# 애플리케이션이 시작될 때 실행
		conn()  # 데이터베이스 연결 및 테이블 생성
		try:
		    yield   # conn() 함수가 여기서 일시 중단되고, 이 지점에서 애플리케이션이 실행됨
		            # 애플리케이션이 클라이언트 요청을 처리하기 시작
		finally:
		    # 애플리케이션이 종료될 때 실행
		    print("Closing database connection...")
		    engine_url.dispose() # SQLAlchemy 엔진에서 연결 풀을 안전하게 닫고, 모든 연결을 정리
		    # 이 방법은 데이터베이스 리소스를 안전하게 관리하고, 애플리케이션이 종료될 때 리소스 누수를 방지합니다.

	'''
	app.router.lifespan_context = lifespan 설정은 
	FastAPI 애플리케이션의 수명 주기 동안 특정 작업을 수행하기 위해 커스텀 컨텍스트 관리자를 설정하는 기능을 합니다. 
	이 설정이 없으면 lifespan 함수에서 정의한 초기화 및 정리 작업이 애플리케이션의 시작 및 종료 시점에 실행되지 않습니다.
	'''
	app.router.lifespan_context = lifespan

	'''
	@app.get("/") 경로 함수는 루트 URL(/)에 대한 요청을 처리하는 역할을 합니다. 
	역할 및 필요성
		루트 경로 처리:
		    웹 애플리케이션의 루트 URL(/)에 접속했을 때, 기본적으로 어떤 페이지를 사용자에게 보여줄지 결정합니다.
		    이 경우, 루트 URL에 접속하면 /event/ URL로 리다이렉트합니다.
		        RedirectResponse는 상태코드 307(리다이렉트)를 반환한다
		        여기서는 "/" 으로 접속한 경우
		        "/event/" 로 리다이렉트하기 위해 사용된다
		사용자 경험 향상:
		    루트 경로로 접속하는 사용자를 바로 주요 기능 페이지로 안내합니다. 
		    예를 들어, 이벤트 목록 페이지로 이동시키는 것입니다.
		    사용자가 특정 페이지로 쉽게 접근할 수 있도록 도와줍니다.
		    이를 통해 사용자가 원하는 정보나 기능에 더 빠르게 접근할 수 있습니다.
	'''
	@app.get("/")
	async def home():
		return RedirectResponse(url="/event/")

	if __name__ == '__main__':
		uvicorn.run("main:app", host="127.0.0.1", port=8000, reload=True)



5. 이벤트 라우트 수정
	
	# routes/event.py 수정

	from typing import List
	from fastapi import APIRouter, Depends, HTTPException, status # Depends 추가
	from database.connection import get_session # 추가
	from models.events import Event, EventUpdate # EventUpdate 추가
	from sqlmodel import select # 추가
	from sqlalchemy.exc import IntegrityError # 추가
	from sqlmodel import Session # 추가

	event_router = APIRouter(
		tags=["Events"]
	)


	'''
	이벤트 조회
	이 함수는 FastAPI 애플리케이션에서 이벤트 목록을 조회하는 엔드포인트를 정의합니다. 
	클라이언트가 GET /event/ 요청을 보낼 때, 이 함수가 호출되어 데이터베이스에서 모든 이벤트를 조회하고 반환합니다.

	데코레이터:
	@event_router.get("/"): FastAPI 라우터 데코레이터입니다. 
	이 데코레이터는 GET 요청을 처리하며, 경로는 /입니다. 즉, /event/ 경로에 대한 GET 요청을 처리합니다.
	response_model=List[Event]: 응답 모델을 지정합니다. 
	이 경우, 반환되는 데이터는 Event 객체의 리스트여야 합니다. 
	이는 Pydantic 모델인 Event의 리스트로 자동 검증 및 직렬화됩니다.

	함수 서명:
	async def retrieve_all_events(session=Depends(get_session)) -> List[Event]:
	async def: 함수가 비동기 함수임을 나타냅니다. 비동기 함수는 await 키워드를 사용하여 비동기 작업을 수행할 수 있습니다.
	session=Depends(get_session): Depends는 FastAPI의 의존성 주입 시스템입니다. 
	get_session 함수에서 데이터베이스 세션을 가져와 session 변수에 할당합니다.
		DB 처리에 필요한 세션 객체가 get_session() 함수에 의존하도록 설정.
		get_session() 함수를 통해 라우트가 세션 객체에 접근할 수 있다.
		Depends 클래스는 FastAPI 애플리케이션에서 의존성 주입을 담당한다.
		이 클래스는 함수를 인수로 사용하거나
		함수 인수를 라우트에 전달할 수 있게 해서
		어떤 처리가 실행되든지 필요한 의존성을 확보해준다.

	-> List[Event]: 함수의 반환 타입 힌트입니다. 이 함수는 Event 객체의 리스트를 반환합니다.

	쿼리 작성:
	statement = select(Event) 
	select(Event): SQLAlchemy의 select 함수를 사용하여 Event 모델에 대한 선택 쿼리를 생성합니다. 
	이는 SQL의 SELECT * FROM events와 유사합니다.
	statement: 생성된 쿼리를 저장하는 변수입니다.

	쿼리 실행:
	events = session.exec(statement).all()
	session.exec(statement): 데이터베이스 세션을 사용하여 쿼리를 실행합니다. 
	statement 변수에 저장된 선택 쿼리를 실행하여 결과를 가져옵니다.
	.all(): 쿼리 결과를 모두 가져와 리스트로 변환합니다. events 변수에는 Event 객체의 리스트가 할당됩니다.

	return events: 조회된 이벤트 리스트를 반환합니다. 
	이 리스트는 response_model로 지정된 List[Event]에 맞게 FastAPI가 자동으로 직렬화하여 클라이언트에 응답합니다.
	'''
	@event_router.get("/", response_model=List[Event]) 
	async def retrieve_all_events(session=Depends(get_session)) -> List[Event]: # 이하수정
		statement = select(Event)
		events = session.exec(statement).all()
		return events
		
		

	'''
	이 함수는 FastAPI 애플리케이션에서 특정 이벤트를 조회하는 엔드포인트를 정의합니다. 
	클라이언트가 GET /event/{id} 요청을 보낼 때,
	이 함수가 호출되어 데이터베이스에서 해당 id에 해당하는 이벤트를 조회하고 반환합니다. 
	이벤트가 존재하지 않으면 404 오류를 반환합니다.

	@event_router.get("/{id}"): FastAPI 라우터 데코레이터입니다. 
	이 데코레이터는 GET 요청을 처리하며, 경로는 /event/{id}입니다. 
	여기서 {id}는 경로 매개변수로, 특정 이벤트의 ID를 나타냅니다.

	response_model=Event: 응답 모델을 지정합니다. 이 경우, 반환되는 데이터는 Event 객체여야 합니다.
	이는 Pydantic 모델인 Event로 자동 검증 및 직렬화됩니다.

	async def retrieve_event(id: int, session=Depends(get_session)) -> Event:
	id: int: 경로 매개변수로, 조회할 이벤트의 ID입니다. FastAPI는 경로에서 이 값을 추출하여 id 변수에 할당합니다.

	session=Depends(get_session): Depends는 FastAPI의 의존성 주입 시스템입니다. 
	get_session 함수에서 데이터베이스 세션을 가져와 session 변수에 할당합니다.

	event = session.get(Event, id)
	session.get(Event, id): 데이터베이스 세션을 사용하여 Event 모델에서 주어진 id에 해당하는 이벤트를 조회합니다. 
	이는 SQLAlchemy의 get 메서드를 사용하여 단일 행을 조회하는 작업입니다.

	event: 조회된 이벤트 객체를 저장하는 변수입니다. 만약 해당 id의 이벤트가 존재하지 않으면 None이 반환됩니다.

	raise HTTPException: HTTP 예외를 발생시킵니다. 이는 FastAPI에서 제공하는 예외 처리 방식입니다.
	status_code=status.HTTP_404_NOT_FOUND: HTTP 상태 코드를 404로 설정합니다. 이는 요청된 리소스를 찾을 수 없음을 나타냅니다.
	detail="Event with supplied ID does not exist": 예외의 상세 메시지를 설정합니다. 
	이는 클라이언트에게 반환되는 응답의 detail 필드에 포함됩니다.
	'''
	@event_router.get("/{id}", response_model=Event)
	async def retrieve_event(id: int, session=Depends(get_session)) -> Event: # 이하 수정
		event = session.get(Event, id)
		if event:
		    return event

		raise HTTPException( # 이하 동일
		    status_code=status.HTTP_404_NOT_FOUND,
		    detail="Event with supplied ID does not exist"
		)
		
		

	'''
	이벤트 생성
	이 함수는 FastAPI 애플리케이션에서 새로운 이벤트를 생성하는 엔드포인트를 정의합니다. 
	클라이언트가 POST /event/new 요청을 보낼 때, 이 함수가 호출되어 데이터베이스에 새로운 이벤트를 추가합니다.
	만약 중복된 고유 필드 값으로 인해 이벤트를 추가할 수 없는 경우, 400 오류를 반환합니다.

	@event_router.post("/new"): FastAPI 라우터 데코레이터입니다. 
	이 데코레이터는 POST 요청을 처리하며, 경로는 /new입니다. 즉, /event/new 경로에 대한 POST 요청을 처리합니다.

	new_event: Event: 요청 본문에 포함된 새로운 이벤트 데이터입니다. FastAPI는 이 데이터를 Event 모델로 자동으로 변환하고 검증합니다.

	이벤트 추가 시도:
	try: 예외 처리를 위해 try 블록을 사용합니다.
	session.add(new_event): 새로운 이벤트 객체를 데이터베이스 세션에 추가합니다. 이는 INSERT SQL 명령어에 해당합니다.
	session.commit(): 데이터베이스에 변경 사항을 커밋합니다. 이는 트랜잭션을 완료하는 작업입니다.
	session.refresh(new_event): 데이터베이스에서 새로운 이벤트 객체를 다시 읽어와서 세션에 반영합니다.
	이는 ID와 같은 자동 생성된 필드를 업데이트하는 데 유용합니다.

	예외 처리:
	except IntegrityError: 데이터베이스에서 고유 필드 제약 조건을 위반하여 발생하는 IntegrityError 예외를 처리합니다.
		500 Internal Server Error는 주로 서버 내부에서 처리할 수 없는 예외가 발생했을 때 나타납니다. 
		동일한 필드 값을 가진 데이터를 포스팅할 때 500 에러가 발생하는 원인은 
		주로 데이터베이스에서 유일성 제약 조건(Unique Constraint)이나 기타 제약 조건을 위반하는 경우입니다.
	session.rollback(): 트랜잭션을 롤백하여 데이터베이스를 이전 상태로 되돌립니다.
	raise HTTPException: HTTP 예외를 발생시킵니다. 이는 FastAPI에서 제공하는 예외 처리 방식입니다.
	status_code=status.HTTP_400_BAD_REQUEST: HTTP 상태 코드를 400으로 설정합니다. 이는 잘못된 요청을 나타냅니다.
	detail="Event with the same unique field value already exists.": 예외의 상세 메시지를 설정합니다. 
	이는 클라이언트에게 반환되는 응답의 detail 필드에 포함됩니다.
	'''

	@event_router.post("/new")
	async def create_event(new_event: Event, session: Session = Depends(get_session)) -> dict:
		try:
		    session.add(new_event)
		    session.commit()
		    session.refresh(new_event)
		except IntegrityError:
		    session.rollback()
		    raise HTTPException(
		        status_code=status.HTTP_400_BAD_REQUEST,
		        detail="Event with the same unique field value already exists."
		    )
		
		return {
		    "message": "Event created successfully."
		}

	'''
	이벤트 업데이트 추가
	이 함수는 FastAPI 애플리케이션에서 특정 이벤트를 업데이트하는 엔드포인트를 정의합니다. 
	클라이언트가 PATCH /event/edit/{id} 요청을 보낼 때, 
	이 함수가 호출되어 데이터베이스에서 해당 id에 해당하는 이벤트를 업데이트합니다. 
	이벤트가 존재하지 않으면 404 오류를 반환합니다.

	async def update_event(id: int, new_data: EventUpdate, session: Session = Depends(get_session)) -> Event:
	new_data: EventUpdate: 요청 본문에 포함된 업데이트할 이벤트 데이터입니다. 
	FastAPI는 이 데이터를 EventUpdate 모델로 자동으로 변환하고 검증합니다.

	이벤트 조회:
	session.get(Event, id): 데이터베이스 세션을 사용하여 Event 모델에서 주어진 id에 해당하는 이벤트를 조회합니다. 
	이는 SQLAlchemy의 get 메서드를 사용하여 단일 행을 조회하는 작업입니다.
	event: 조회된 이벤트 객체를 저장하는 변수입니다. 만약 해당 id의 이벤트가 존재하지 않으면 None이 반환됩니다.
	if not event:: 이벤트 객체가 존재하지 않는지 확인합니다. event가 None인 경우, 이벤트가 존재하지 않는다는 의미입니다.
	raise HTTPException: 이벤트가 존재하지 않을 경우, 404 예외를 발생시킵니다.

	업데이트할 데이터 준비:
	event_data = new_data.model_dump(exclude_unset=True)
	for key, value in event_data.items():
		setattr(event, key, value)

	event_data = new_data.model_dump(exclude_unset=True): new_data 객체를 딕셔너리로 변환합니다. 
	exclude_unset=True는 제공되지 않은 필드를 제외합니다.
		model_dump는 Pydantic 모델의 메서드로, 모델을 딕셔너리 형태로 직렬화합니다. 
		exclude_unset=True 옵션은 기본값이 설정되지 않은 필드를 제외하고 직렬화합니다. 
		이를 통해 클라이언트가 제공하지 않은 필드는 무시됩니다.
		이는 클라이언트가 일부 필드만 업데이트하고자 할 때 유용합니다.
		    예를 들어, 클라이언트가 { "title": "new title" }을 보냈다면, 
		    new_data.model_dump(exclude_unset=True)는 {"title": "new title"} 딕셔너리를 반환합니다.

	for key, value in event_data.items(): event_data 딕셔너리의 각 키-값 쌍을 반복합니다.

	setattr(event, key, value): 이벤트 객체의 각 필드를 업데이트합니다. 
	setattr 함수는 객체의 속성을 동적으로 설정합니다.
		여기서 event 객체의 key 속성에 value 값을 설정합니다.
		예를 들어, 클라이언트가 다음과 같은 JSON 데이터를 보냈다고 가정합니다
		    {
		"title": "new title",
		"description": "updated description"
		    }
		    key가 "title", "description"인 반복을 수행합니다.
		    setattr(event, "title", "new title")와 setattr(event, "description", "updated description")가 호출되어, 
		    event 객체의 title과 description 속성이 업데이트됩니다.

	session.add(event): 업데이트된 이벤트 객체를 데이터베이스 세션에 추가합니다. 이는 UPDATE SQL 명령어에 해당합니다.
	session.commit(): 데이터베이스에 변경 사항을 커밋합니다. 이는 트랜잭션을 완료하는 작업입니다.
	session.refresh(event): 데이터베이스에서 업데이트된 이벤트 객체를 다시 읽어와서 세션에 반영합니다. 
	이는 변경된 데이터를 최신 상태로 유지하는 데 유용합니다.
	'''
	@event_router.patch("/edit/{id}", response_model=Event)
	async def update_event(id: int, new_data: EventUpdate, session: Session = Depends(get_session)) -> Event:
		event = session.get(Event, id)
		if not event:
		    raise HTTPException(
		        status_code=status.HTTP_404_NOT_FOUND,
		        detail="Event with supplied ID does not exist"
		    )

		event_data = new_data.model_dump(exclude_unset=True)
		for key, value in event_data.items():
		    setattr(event, key, value)
		
		session.add(event)
		session.commit()
		session.refresh(event)
		
		return event
	'''
	session.add(event)가 INSERT 또는 UPDATE로 해석되는 이유는
	SQLAlchemy는 객체-관계 매핑(ORM) 라이브러리로, 데이터베이스와의 상호작용을 관리합니다. 
	session.add(event)가 INSERT 또는 UPDATE로 해석되는 이유는 다음과 같습니다:

	객체 상태 관리:
	SQLAlchemy는 객체의 상태를 추적합니다. 
	객체는 Transient, Pending, Persistent, Detached와 같은 상태를 가질 수 있습니다.
		Transient: 세션에 추가되지 않은 새로운 객체.
		Pending: 세션에 추가되었지만, 아직 데이터베이스에 저장되지 않은 객체.
		Persistent: 세션에 추가되어 데이터베이스에 저장된 객체.
		Detached: 세션에서 분리된 객체.

	INSERT:
	POST 요청에서 새로운 객체(event)를 생성하고 session.add(event)를 호출하면, 
	SQLAlchemy는 이 객체가 새로운 객체(Transient)임을 인식하고, 이를 데이터베이스에 삽입하기 위해 INSERT 문을 생성합니다.
	이 객체는 Pending 상태가 되고, session.commit()을 호출하면 데이터베이스에 저장되어 Persistent 상태가 됩니다.

	UPDATE:
	PATCH 요청에서 이미 존재하는 객체를 수정하고자 할 때, 먼저 데이터베이스에서 해당 객체를 조회합니다. 
	조회된 객체는 이미 Persistent 상태입니다.
	객체의 속성을 수정한 후 session.add(event)를 호출하면, 
	SQLAlchemy는 이 객체가 이미 존재하는 객체(Persistent)임을 인식하고, 이를 업데이트하기 위해 UPDATE 문을 생성합니다.
	session.commit()을 호출하면 변경 사항이 데이터베이스에 반영됩니다.
	'''

	@event_router.delete("/delete/{id}")
	async def delete_event(id: int, session=Depends(get_session)) -> dict: # 이하 수정
		event = session.get(Event, id)
		if event:
		    session.delete(event)
		    session.commit()
		    return {
		        "message": "Event deleted successfully"
		    }

		raise HTTPException(
		    status_code=status.HTTP_404_NOT_FOUND,
		    detail="Event with supplied ID does not exist"
		)

	'''
	DELETE 요청에서 404 Not Found 오류가 발생하는 이유는 몇 가지가 있을 수 있습니다. 
	라우트 경로가 정확히 일치하지 않거나, 삭제할 이벤트가 데이터베이스에 존재하지 않을 수 있습니다.
	@event_router.delete("/{id}") 를 @event_router.delete("/delete/{id}") 로 고치면 해결
	'''




이벤트 라우트 테스트

	이벤트 조회 GET 테스트
	curl -X 'GET' 'http://127.0.0.1:8000/event/' -H 'accept: application/json' -H 'Content-Type: application/json'

	이벤트 생성 POST 테스트
	curl -X 'POST' 'http://127.0.0.1:8000/event/new' -H 'accept: application/json' -H 'Content-Type: application/json' -d '{"id": 1, "title": "test", "image": "https://test.com", "description": "testing", "tags":["test"], "location": "local"}'

	이벤트 조회 GET 테스트
	curl -X 'GET' 'http://127.0.0.1:8000/event/1' -H 'accept: application/json' -H 'Content-Type: application/json'
	
	이벤트 업데이트 PATCH 테스트
	curl -X 'PATCH' 'http://127.0.0.1:8000/event/edit/1' -H 'accept: application/json' -H 'Content-Type: application/json' -d '{"title": "changed"}'
	
	이벤트 삭제 DELETE 테스트
	curl -X 'DELETE' 'http://127.0.0.1:8000/event/delete/1' -H 'accept: application/json'
