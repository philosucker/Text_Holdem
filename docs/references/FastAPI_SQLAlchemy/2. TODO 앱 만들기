Ch7  TODO 앱 만들기

TODO 리스트 표시하기
TODO 작업 추가하기
TODO 작업 설명문을 변경하기
TODO 작업 삭제하기
TODO 작업에 완료 플래그 달기
TODO 작업애 완료 플래그 제거하기


1. 디렉토리 준비

    api 폴더 내에
    schemas/__init__.py  # API 응답/요청 스키마 정의
    routers/__init__.py  # API 함수 구현
    models/__init__.py   # DB 모델 클래스(DB 테이블과 연결될 모델 클래스 정의)
    cruds/__init__.py    # DB 읽기/쓰기 함수 구현
    
        라우터는 MVC (model view controller)의 컨트롤러에 해당한다.
        컨트롤러는 모델이나 뷰를 연결하기 때문에 비대해지기 쉽다
        이를 피하기 위해 DB의 CRUD 처리는 별도의 디렉토리와 모듈에 구현한다



모듈 분할 단위는 리소스 단위로 하는 게 좋다.

2. TODO 애플리캐이션은 크게 두 개의 리소스로 나눈다.
    
    api/router/task.py  작업 생성/변경/삭제 부분과
    api/router/done.py  완료 플래그 생성/삭제 부분

    # task.py

        from fastapi import APIRouter

        router = APIRouter()


        @router.get("/tasks")
        async def list_tasks():
            pass

    
아래 코드에서 FastAPI 인스턴스에 대해 
데코레이터로 수정된 함수를 FastAPI 에서는 경로 동작 함수 path operation function 이라고 부른다   
    @app.get("/hello") # get 은 REST의 CRUD 메서드 부분으로 operation에 해당한다. /hello 엔드포인트는 path 
    async def hello():
        return {"message": "hello world!"}
    
    
        @router.post("/tasks")
        async def create_task():
            pass


        @router.put("/tasks/{task_id}")
        async def update_task():
            pass


        @router.delete("/tasks/{task_id}")
        async def delete_task():
            pass
        
    # done.py

        from fastapi import APIRouter

        router = APIRouter()


        @router.put("/tasks/{task_id}/done")
        async def mark_task_as_done():
            pass


        @router.delete("/tasks/{task_id}/done")
        async def unmark_task_as_done():
            pass
            
3. 총 6개의 라우터 함수들을 두 개의 모듈로 나눴다.
라우터 인스턴스를 FastAPI로 가져온다.

    from fastapi import FastAPI
    from api.routers import task, done

    app = FastAPI()
    app.include_router(task.router)
    app.include_router(done.router)

    @app.get("/hello")
    async def hello():
        return {"message": "hello world!"}
    
CH9 응답 스키마 정의             
            
    파이썬은 동적 타입 언어로, 프로그램이 실행될 때 변수의 데이터 타입을 명시적으로 선언하지 않고
    변수에 할당되는 값에 따라 데이터 타입이 동적으로 결정되는 언어다.

    파이썬의 타입힌트를 사용하면
    FastAPI가 의존하는 Pydantic 이라는 라이브러리를 통해
    API 입출력 유효성 검사를 수행할 수 있다.

    Pydantic은 파이썬에서 데이터 모델을 정의하고
    데이터 유효성을 검사하는 라이브러리이다.


4. 응답 타입 정의

    앞서 작성한 경로 동작 함수에 응답 타입을 정의한다

    api/schemas/task.py 이 파일은 FastAPI의 스키마를 나타낸다. 
        API의 스키마는 API의 요청과 응답의 타입을 정의하기 위한 것으로 DB의 스키마와는 다르다.

    # task.py 응답 스키마

        from pydantic import BaseModel, Field

        '''
        FastAPI의 모델임을 나타내는 BaseModel을 상속받아 Task 클래스를 만든다    
        파이썬 3.9 이전에는 | 연산자가 없었기 때문에 Optional[str] 이라고 써야 했다.
        from typing import Optional
        title: Optional[str] = Field(None, example="세탁소에 맡긴 옷을 찾으러 가기")

        또 파이썬 3.9 이전에는 list[str] 표기가 불가능하다.
        from typing import List, Dict 를 한 뒤
        List[str], Dict[int, str] 로 써야했다.
        '''

        class Task(BaseModel):
            id: int
            title: str | None = Field(None, example="세탁소에 맡긴 옷을 찾으러 가기")
            done: bool = Field(False, description="완료 플래그")


    
5. 이제 라우터에서는 응답 스키마를 이용해 API의 요청과 응답을 정의한다
조회 함수는 별도의 요청파라미터나 요청 본문을 받을 필요 없으므로 응답만 정의한다

api/router/task.py 의 list_tasks 함수를 아래와 같이 수정한다.

        
    import api.schemas.task as task_schema
    '''    
    api.schemas.task 를 task_schema 로 임포트하는 이유는 
    나중에 DB와 연결해 models 를 정의할 때 
    api/model/task.py 로 같은 이름의 파일을 정의해 
    이를 task_model 로 임포트하기 위해서이다.
    '''

    # @router.get("/tasks")
    # async def list_tasks():
    #     pass

    '''
    응답의 스키마로 경로 동작 함수의 데코레이터에 response_model을 설정한다.
    GET /tasks 는 스키마에 정의한 Task 클래스를 모두 반환해야 하므로 리스트로 정의한다
    아직 DB와 연동되지 않았으므로 더미데이터를 반환한다
    '''
    @router.get("/tasks", response_model=list[task_schema.Task])
    async def list_tasks():
        return [task_schema.Task(id=1, title="첫번째 할 일")] 

CH10 요청 스키마 정의      

6. 요청 타입 정의

POST 함수에서는 요청 본문 response body 를 받아 데이터를 저장하므로 
요청 스키마를 정의해줘야 한다.

    일반적으로 DB에서 자동으로 id를 매기는 경우가 많으므로
    POST 함수에서 id를 지정하지 않고
    done 필드도 완료전까진 항상 False 이므로 
    요청 본문으로 title필드만 받게 한다.

    요청 스키마는 응답 스키마와 함께
    api/schemas/task.py 에 정의한다

        class TaskCreate(BaseModel):
            title: str | None = Field(None, example="세탁소에 맡긴 옷을 찾으러 가기")

        위와 같이 하면

        class Task(BaseModel):
            id: int
            title: str | None = Field(None, example="세탁소에 맡긴 옷을 찾으러 가기")
            done: bool = Field(False, description="완료 플래그")
            
        class TaskCreate(BaseModel):
            title: str | None = Field(None, example="세탁소에 맡긴 옷을 찾으러 가기")
    
        여기서 title 필드가 일치하므로
         
        title만 가진 베이스 클래스로 TaskBase를 정의한 후
        기존의 Task와 TaskCreate는 TaskBase를 상속해 오버라이딩 한다.
 
            class TaskBase(BaseModel):
                title: str | None = Field(None, example="세탁소에 맡긴 옷을 찾으러 가기")
             
            class TaskCreate(TaskBase):
                pass
             
            class Task(TaskBase):
                id: int
                done: bool = Field(False, description="완료 플래그")

                class Config:
                    orm_mode = True
 
7. POST 함수가 실행되고 난 후 요청에 대한 API의 응답으로 
즉 TaskCreate의 응답으로 TaskCreateResponse 응답 스키마도 정의한다

class TaskCreateResponse(TaskCreate):
    id: int

    class Config:
        orm_mode = True
 
8. 이제 라우터에, 새로 정의한 요청-응답 스키마를 활용해 
POST의 경로동작함수 create_task()를 정의한다
아직 DB와 연동되지 않았으므로 요청 본문에 id를 부여해 적절한 응답을 반환하게 한다. 

    '''
    task_body: task_schema.TaskCreate: 
    create_task 함수는 task_schema.TaskCreate 타입의 task_body 매개변수를 받습니다. 
    FastAPI는 요청 본문을 이 모델로 변환하고 유효성을 검사합니다.

    task_body.dict(): 
    task_body 객체를 딕셔너리로 변환합니다. 
    이는 Pydantic 모델의 메서드로, 모델의 데이터를 딕셔너리 형태로 반환합니다.

    task_schema.TaskCreateResponse(id=1, **task_body.dict()): 
    TaskCreateResponse 모델의 인스턴스를 생성합니다. id는 1로 고정되어 있으며, 나머지 필드는 task_body에서 가져옵니다. 
    **task_body.dict()는 딕셔너리의 키-값 쌍을 TaskCreateResponse의 필드로 전달합니다.

     즉 task_schema.TaskCreateResponse(id=1, title=task_body.title, done=task_body.done) 라고 작성하는 것과 같습니다
     '''
    @router.post("/tasks", response_model=task_schema.TaskCreateResponse)
    async def create_task(task_body: task_schema.TaskCreate):
        return task_schema.TaskCreateResponse(id=1, **task_body.dict())
 
9. 나머지 요청과 응답을 모두 정의한다

# api/routers/task.py
@router.put("/tasks/{task_id}", response_model=task_schema.TaskCreateResponse)
async def update_task(task_id: int, task_body: task_schema.TaskCreate):
    return task_schema.TaskCreateResponse(id=task_id, **task_body.dict())


@router.delete("/tasks/{task_id}", response_model=None)
async def delete_task(task_id: int):
    return

# api/routers/done.py
@router.put("/tasks/{task_id}/done", response_model=None)
async def mark_task_as_done(task_id: int):
    return


@router.delete("/tasks/{task_id}/done", response_model=None)
async def unmark_task_as_done(task_id: int):
    return
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
