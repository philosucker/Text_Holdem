책 챕터8 테스트

테스트는 

정상 실행을 보장하고
프로덕션 배포 전 이상징후를 감지하기위해

애플리케이션 개발주기에서 빼놓을 수 없는 부분이다.

지금까지 라우트를 수동테스트 했지만
여기서는 테스트 자동화를 한다

8.1 pytest를 사용한 단위테스트 연습

단위 테스트 : 애플리케이션의 개별 컴포넌트를 테스트하는 절차. 
예를 들어 애플리케이션의 개별 라우트가 적절한 응답을 반환하는지

pip install pytest

1. 테스트 폴더 및 파일 생성
    # fastapi/ch07/planner_mongoDB
    mkdir tests && cd tests
    touch __init__.py
    touch arithmetic_operations.py
    touch test_arithmetic_operations.py

    테스트 파일을 만들때는 파일명 앞에 test_ 를 붙여야 한다
    그러면 해당 파일이 테스트 파일이라는 걸
    pytest 라이브러리가 인식해서 실행한다

2. 테스트 대상 함수 모듈 및 테스트 함수 모듈을 작성한다
    # arithmetic_operations.py

    # 테스트 대상 함수
    def add(a: int, b: int) -> int:
        return a + b
        
    def subtract(a: int, b: int) -> int:
        return b - a
        
    def multiply(a: int, b: int) -> int:
        return a * b
        
    def divide(a: int, b: int) -> int:
        return b // a

    # test_arithmetic_operations.py

    from .arithmetic_operations import add, subtract, multiply, divide
        
     # 테스트 함수
    def test_add() -> None:
        assert add(1, 1) == 2

    def test_subtract() -> None:
        assert subtract(2, 5) == 3

    def test_multiply() -> None:
        assert multiply(10, 10) == 100

    def test_divide() -> None:
        assert divide(25, 100) == 4   


        상대 경로 임포트 (from .arithmetic_operations import ...): 이 방식은 현재 모듈의 위치를 기준으로 상대 경로를 사용하여 모듈을 임포트합니다. 이는 test_arithmetic_operations.py 파일이 tests 폴더 내에 있고, arithmetic_operations.py 파일도 같은 tests 폴더 내에 있을 때 사용됩니다.

        절대 경로 임포트 (from arithmetic_operations import ...): 이 방식은 Python의 모듈 검색 경로에 arithmetic_operations.py가 있어야 합니다. 현재 설정에서는 tests 폴더가 모듈 검색 경로에 포함되어 있지 않기 때문에, Python은 arithmetic_operations 모듈을 찾지 못합니다.

        절대 경로 임포트를 사용하여 arithmetic_operations 모듈을 가져오려면, tests 폴더가 Python의 모듈 검색 경로에 포함되도록 설정해야 합니다. 이를 위해 PYTHONPATH 환경 변수를 설정하거나, 테스트 스크립트에서 경로를 추가할 수 있습니다.

        방법 1: PYTHONPATH 설정
        테스트 실행 시 PYTHONPATH 환경 변수를 설정하여 tests 폴더를 포함시킵니다.

        PYTHONPATH=/home/philosucker/fastapi/ch07/planner_mongoDB/tests pytest test_arithmetic_operations.py

        이 명령어는 PYTHONPATH 환경 변수를 일시적으로 설정하여 tests 폴더를 Python의 모듈 검색 경로에 추가합니다.
        이 설정은 명령어가 실행되는 동안만 유효합니다.

        방법2:
        테스트 스크립트 test_arithmetic_operations.py 파일의 상단에 sys.path에 tests 폴더를 추가합니다.
        import sys
        import os
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))

        이 방법은 스크립트가 실행되는 동안만 유효하며, 스크립트 내에서만 적용됩니다.


        영구적인 PYTHONPATH 설정
        영구적으로 환경 변수를 설정하려면 운영 체제의 환경 변수 설정 방법을 사용해야 합니다.

        export PYTHONPATH="/home/philosucker/fastapi/ch07/planner_mongoDB/tests"

        이 설정을 쉘 설정 파일에 추가한 후, 터미널을 다시 시작하거나 source ~/.bashrc 명령어를 실행하여 설정을 적용합니다.

 3. 테스트 실행
 
     pytest test_arithmetic_operations.py

    그냥 pytest 를 실행하면, 실행 하는 경로에 있는 모든 테스트 파일을 실행한다.

    통과된 테스트는 터미널창에 초록색으로 표시된다 실패하면 빨간색


8.2 테스트 환경 구축

사용자 인증과 CRUD 처리용 라우트를 테스트 해보자.

    8.2-1. 
        우리가 만든 비동기 API를 테스트하려면 
        httpx와 pytest-asyncio 라이브러리를 설치해야 한다

        pip install httpx pytest-asyncio

    8.2-2. 라이브러리 설치 완료 후 설정 파일을 만든다
        main.py 가 있는 폴더에 pytest.ini 설정 파일을 만들고 다음 코드를 추가한다

        nano pytest.ini

        [pytest]
        asyncio_mode = auto

        pytest가 실행될때 이 파일의 내용을 불러온다.
        이 설정은 pytest가 모든 테스트를 비동기식으로 실행한다는 의미다

    8.2-3. tests 폴더에 테스트 시작점이될 conftest.py 를 만든다.
        이 파일은 테스트 파일이 필요로 하는 애플리케이션의 인스턴스를 만든다.

        touch tests/conftest.py

        # tests/conftest.py
        이벤트 루프(픽스처)
        DB
        클라이언트(픽스처)
 

8.3 REST API 라우트 테스트 작성

8.3-1 사용자 등록 라우트 테스트, 사용자 로그인 라우트 테스트
touch tests/test_login.py

# tests/test_login.py

몽고DB 서버가 실행되고 있는 상태에서 별도의 터미널 창을 열어 테스트를 진행한다

pytest tests/test_login.py

8.3-2 CRUD 라우트 테스트
touch tests/test_routes.py

# tests/test_routes.py

다 안됨.

8.4 테스트 커버리지

테스트 커버리지 보고서는 
테스트가 전체 애플리케이션 코드 중 어느 정도 비율의 코드를
테스트하는지 정량화해서 보여준다


pip install coverage

coverage run -m pytest

coverage report
이 보고서는 테스트에 사용된 코드의 비율을 보여준다


coverage html
이 보고서는 사용된 코드블록까지 보여준다.


책 챕터9 배포

1. 개발자가 애플리케이션을 도커로 배포하는 단계

    9.1 배포준비

    배포는 개발주기의 가장 마지막 단계다
    배포전 배포를 위한 설정이 모두 준비됐는지 확인해야 한다
    이 설정에는 의존 라이브러리가 정의된 requirements.txt 파일과 
    환경변수설정이 포함된다

    의존성 파일 생성:
    pip freeze > requirements.txt

    9.2 도커를 사용한 배포 (일반PC, 물리서버에 설치시)
    서버리스플랫폼(클라우드 서비스)에 배포하는 과정은 플랫폼마다 다르다.

    순서 : 도커파일 작성 > 도커이미지 빌드 > (yaml 파일과 함께) 배포

    9.2-1 도커파일작성

    프로젝트의 루트디렉토리에 Dockerfile 이라는 파일을 생성한다
        touch Dockerfile

        다음과 같은 내용을 추가한다. 

        FROM python:3.12

        WORKDIR /app

        COPY
        requirements.txt /app/requirements.txt

        RUN pip install --upgrade pip && pip install -r /app/requirements.txt

        EXPOSE 8000

        COPY ./ /app

        CMD ["python", "main.py"]


    설명
        도커파일에서 가장먼저 할일은 FROM 키워드를 사용해 기본 이미지를 지정하는 것이다
        여기서는 파이썬 이미지를 사용하며, 여러가지 버전을 사용할 수 있다. 

        WORKDIR 키워드를 사용해 작업 디렉토리를 /app으로 설정한다.
        작업 디렉토리는 이미지로 빌드될 프로젝트 구조를 정리할 때 도움이 된다

        COPY 키워드를 사용해 requirements 파일을 로컬디렉토리에서 도커 컨테이너의 작업디렉토리롤 복사한다

        RUN 명령을 사용해 pip 패키지를 업그레이드 하고 requirements 를 기반으로 라이브러리를 설치한다.

        EXPOSE 명령을 사용해 로컬 네트워크에서 애플리케이션에 접속할수 있는 포트번호를 설정한다

        나머지 파일을 도커 컨테이너의 작업 디렉토리로 복사한다 

        CMD 명령을 사용해 애플리케이션을 실행한다

    이미지를 빌드하기 전에 .dockerignore 파일을 만들고 다음 내용을 추가한다
            dockerignore 파일에는 도커파일에 정의된 명령(COPY 등)을 실행할때
            제외할 파일과 폴더를 지정한다
            
        nano .dockerignore

        venv
        .env
        .git

    9.2-2 도커 이미지 빌드

    docker build -t event-planner-api .

        이 명령은 event-planner-api라는 태그를 사용해
        현재 디렉토리를 이미지로 빌드한다

    9.2-3 도커 구성파일 작성
        
        애플리케이션에 필요한 여러 컨테이너를 정의한
        도커 구성 파일 docker-compose.yml을 작성한다.
        이 파일에는 각 서비스의 이미지, 네트워크 설정, 볼륨설정, 환겅변수
        등이 포함된다.

        먼저 루트 디렉토리에 구성파일을 만들고 코드를 입력한다

        nano docker-compose.yml

        version: "3"

        services:
          api:
            build: .
            image: event-planner-api:latest
            ports:
              - "8080:8080"
            env_file:
              - .env.prod

          database:
            image: mongo
            ports:
              - "27017"
            volumes:
              - data:/data/db

        volumes:
          data:

        설명
        services 섹션에 API 서비스와 DB 서비스를 정의한다

        api의 build는 현재 디렉토리에 있는 도커파일을 기준으로 event-planner-api:latest 이미지를 빌드한다.

        API 서비스의 포트 설정:

        ports 설정에서 "8000:8000"은 
        호스트 머신의 포트 8000을 컨테이너의 포트 8000에 매핑하여 
        HTTP를 통해 API에 접근할 수 있도록 합니다.
        이는 호스트 머신에서 http://localhost:8000으로 접속하면 컨테이너 내부에서 실행 중인 애플리케이션의 포트 8000으로 요청이 전달된다는 의미입니다.
        
        Database 서비스의 이미지와 포트 설정:

        database 서비스는 mongo 이미지를 사용합니다.
        ports 설정에서 "27017"은 컨테이너 내부의 포트 27017을 정의하지만, 
        외부로 노출하지는 않습니다. 
        이는 해당 포트가 외부에 노출되지 않고 
        API 서비스에서만 접근 가능하다는 것을 의미합니다.
         영구적 볼륨(저장소)를 서비스에 할당해서 데이터를 저장하는데 사용한다
         여기서는 /data/db 폴더가 사용된다
        data 라는 볼륨을 할당하여 배포에 사용한다



    .env.prod 환경 파일을 작성한다
        nano .env.prod
        
            DATABASE_URL=mongodb://database:27017/myapp
            SECRET_KEY=NOTSTRONGENOUGH!      
               
2. 개발자가 애플리케이션을 배포하는 단계

    도커 허브에 이미지 푸시
    개발자가 도커 이미지를 도커 허브에 푸시하여 다른 유저가 접근할 수 있도록 합니다.
    먼저 도커 허브에 로그인합니다.

    docker login

    이미지를 태그합니다.
    docker tag my-application:latest my-dockerhub-username/my-application:latest

    이미지를 도커 허브에 푸시합니다.
    docker push my-dockerhub-username/my-application:latest

    이제 다른 유저가 도커 허브에서 이미지를 pull할 수 있습니다.



3. 유저가 애플리케이션을 자신의 컴퓨터에서 실행하는 단계
    Docker 설치
    유저는 도커와 도커 컴포즈가 설치되어 있어야 합니다. 

    애플리케이션 파일과 구성 파일 받기
    유저는 개발자로부터 애플리케이션 파일, Dockerfile, docker-compose.yml, .env.prod 파일을 받습니다. 
    또는 개발자가 도커 허브에 푸시한 이미지를 사용할 수도 있습니다.

    도커 컴포즈를 사용해 서비스 실행
    유저는 다음 명령어를 통해 애플리케이션을 실행합니다.
    docker-compose up -d

    유저는 다음 명령어로 실행 중인 컨테이너를 확인합니다.
    docker ps

    유저는 브라우저에서 http://localhost:8000을 통해 
    애플리케이션에 접속할 수 있습니다.

docker pull mongo
    이 명령은 몽고DB 이미지를 pull 해서 API 컨테이너가 접근할 수 있는 
데이터베이스 컨테이너를 생성한다.

유저가 docker-compose up 명령을 실행하면 도커 컴포즈가 docker-compose.yml 파일에 정의된 서비스에 필요한 이미지를 자동으로 pull합니다. 따라서 유저가 명시적으로 docker pull mongo 명령을 실행할 필요는 없습니다.


참고
도커 컨테이너는 별도의 네트워크 설정을 사용하며 
기본설정에서는 Localhost 주소로 연결하는 걸 허용하지 않는다.
            
도커 컨테이너는 기본적으로 호스트 시스템과는 별도의 네트워크 설정을 사용합니다. 이를 통해 컨테이너 간의 네트워크 격리가 가능하고, 각 컨테이너가 독립적으로 실행될 수 있습니다. 하지만 기본 설정에서는 다음과 같은 특성을 가집니다:

1. **기본 네트워크 격리**:
   - 각 컨테이너는 기본적으로 도커의 브리지 네트워크(bridge network) 내에서 실행됩니다.
   - 컨테이너끼리는 같은 브리지 네트워크 내에서 서로 통신할 수 있지만, 호스트 시스템이나 다른 네트워크와는 격리됩니다.

2. **로컬호스트 연결 제한**:
   - 컨테이너 내부의 애플리케이션이 `localhost`(127.0.0.1) 주소를 사용할 경우, 이는 해당 컨테이너 내부의 주소를 의미합니다.
   - 따라서 호스트 시스템의 `localhost`와는 다릅니다. 컨테이너 내부의 애플리케이션은 기본 설정으로는 호스트의 `localhost` 주소에 직접 접근할 수 없습니다.

### 포트 포워딩으로 문제 해결

도커에서는 `ports` 설정을 통해 컨테이너 내부의 포트를 호스트 시스템의 포트에 매핑하여 이러한 문제를 해결합니다. 이를 통해 호스트 시스템의 특정 포트로 들어오는 트래픽이 컨테이너 내부의 지정된 포트로 전달됩니다.

#### 예시: `docker-compose.yml` 파일에서 포트 매핑

```yaml
services:
  api:
    build: .
    image: event-planner-api:latest
    ports:
      - "8000:8000"
    env_file:
      - .env.prod

  database:
    image: mongo
    ports:
      - "27017:27017"
    volumes:
      - data:/data/db

volumes:
  data:
```

### 설명

1. **API 서비스**:
   - `ports` 설정에서 `"8000:8000"`은 호스트 머신의 포트 `8000`을 컨테이너의 포트 `8000`에 매핑합니다.
   - 이를 통해 호스트 시스템에서 `http://localhost:8000`으로 접속하면 컨테이너 내부에서 실행 중인 애플리케이션의 포트 `8000`으로 요청이 전달됩니다.

2. **Database 서비스**:
   - `ports` 설정에서 `"27017:27017"`은 호스트 머신의 포트 `27017`을 컨테이너의 포트 `27017`에 매핑합니다.
   - 이는 데이터베이스가 외부에서 접근 가능하도록 설정한 예입니다.

### 네트워크 설정 요약

- **기본 설정**: 컨테이너는 기본적으로 브리지 네트워크 내에서 실행되며, 컨테이너 간의 통신이 가능하지만 호스트 시스템과는 격리됩니다.
- **로컬호스트 제한**: 컨테이너 내부의 `localhost`는 해당 컨테이너 내부의 주소를 의미합니다.
- **포트 포워딩**: `ports` 설정을 통해 호스트 시스템의 포트를 컨테이너의 포트에 매핑하여, 호스트 시스템에서 컨테이너 내부의 애플리케이션에 접근할 수 있도록 합니다.

따라서 "도커 컨테이너는 별도의 네트워크 설정을 사용하며 기본설정에서는 Localhost 주소로 연결하는 걸 허용하지 않는다."는 의미는, 기본적으로 컨테이너가 호스트 시스템과 네트워크 격리가 되어 있으며, 포트 포워딩을 설정해야 호스트 시스템에서 컨테이너의 애플리케이션에 접근할 수 있다는 뜻입니다.
