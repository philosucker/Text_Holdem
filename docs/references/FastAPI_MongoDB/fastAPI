책 요약 전 배경지식

Web API (Web Application Programming Interface)
	애플리케이션 간의 데이터 통신을 위한 인터페이스를 제공합니다. 
	주로 HTTP 프로토콜을 사용하여 요청(request)과 응답(response)을 주고받으며, 
	클라이언트가 서버의 기능을 호출할 수 있도록 합니다. 
	예를 들어, REST API와 GraphQL API가 Web API의 대표적인 예입니다.
	
FastAPI는 Python으로 작성된 현대적인 웹 프레임워크로, 
	주로 웹 API를 구축하는 데 초점을 맞춘 프레임워크지만, 
	웹 애플리케이션도 구축할 수 있습니다.

FastAPI로 Web API를 구축한다는 것은
	이 프레임워크를 사용하여 API 엔드포인트를 설계하고, 
	데이터 요청과 응답을 처리하는 서버를 만든다는 것을 의미합니다. 
	예를 들어, 클라이언트가 특정 URL에 GET 요청을 보내면, 
	FastAPI 서버가 해당 요청을 받아서 적절한 데이터를 반환합니다.
		FastAPI는 RESTful API, GraphQL API 등 
		다양한 형태의 웹 API를 구축할 수 있는 기능을 제공합니다. 
		비동기 프로그래밍, 데이터 검증, 자동 문서화 등의 기능을 통해 
		효율적이고 강력한 API를 만들 수 있습니다.
	
Web Application은 
	사용자 인터페이스(UI)를 포함한 전체 애플리케이션을 의미합니다. 
	사용자가 브라우저를 통해 접근하고, 상호작용할 수 있는 
	웹 사이트나 웹 애플리케이션을 말합니다.

FastAPI로 Web Application을 구축한다는 것은 
	Web API뿐만 아니라 사용자 인터페이스(UI)도 포함하는 
	전체 애플리케이션을 만든다는 것을 의미할 수 있습니다. 
	FastAPI는 주로 API를 구축하는 데 초점을 맞추지만, 
	템플릿 렌더링을 지원하여 기본적인 웹 페이지도 제공할 수 있습니다.
		FastAPI는 템플릿 렌더링을 지원하여 HTML 페이지를 생성할 수 있습니다. 
		이를 통해 기본적인 웹 애플리케이션을 구축할 수 있지만, 
		복잡한 웹 애플리케이션을 구축하는 데는 Django, Flask 등의
		 다른 프레임워크를 사용하는 것이 더 적합할 수 있습니다.
	
FastAPI로 게임 서버를 구축하는 것은 Web API를 구축하는 것과 비슷합니다. 
	그러나, 게임 서버는 실시간 통신과 같은 추가적인 요구 사항을 가질 수 있으며, 
	이는 WebSocket 같은 기술을 활용하여 구현될 수 있습니다.
	FastAPI는 WebSocket을 지원하며, 이를 통해 실시간 기능을 쉽게 구현할 수 있습니다.

WebSocket은 웹에서 실시간 통신을 가능하게 해주는 프로토콜입니다. 
	양방향 통신: WebSocket은 지속적인 양방향 연결을 유지하여 
	클라이언트가 서버에 요청을 보내기만 하는 HTTP와는 달리, 
	서버도 클라이언트에게 데이터를 푸시할 수 있습니다.
	
	지속적인 연결: HTTP는 요청-응답 패턴을 따르며,
	각 요청마다 새로운 연결을 설정하고 응답 후에 연결을 종료합니다. 
	반면 WebSocket은 초기 핸드셰이크 후에는 연결을 계속 유지합니다. 
	이를 통해 연결 설정과 종료에 따른 오버헤드를 줄이고, 
	더 빠른 실시간 통신을 구현할 수 있습니다.
	
	낮은 지연 시간: 지속적인 연결을 유지하기 때문에, 
	데이터 전송 시 지연 시간이 매우 짧습니다.
	이는 실시간 채팅, 온라인 게임, 주식 거래 애플리케이션 등
	지연 시간이 중요한 애플리케이션에 유용합니다.
	
WebSocket의 작동 방식:

	핸드셰이크: 클라이언트는 HTTP 요청을 통해 서버에 WebSocket 연결을 요청합니다. 
	이 요청은 표준 HTTP 요청처럼 보이지만, 일부 특별한 헤더를 포함합니다.
	
	업그레이드: 서버는 WebSocket 요청을 받아들여야 할 경우, 
	응답 헤더를 통해 연결을 업그레이드합니다.
	
	통신 시작: 핸드셰이크가 성공하면, 
	클라이언트와 서버는 지속적인 연결을 유지하며 실시간으로 데이터를 주고받을 수 있습니다.
	
WebSocket의 사용 예시:
	실시간 채팅 애플리케이션: 
	사용자가 메시지를 보내면 서버가 이를 받아 다른 사용자에게 즉시 전송합니다.
	
	온라인 멀티플레이어 게임: 
	게임 상태나 플레이어의 움직임을 실시간으로 동기화합니다.
	
	실시간 데이터 스트리밍: 
	주식 가격, 스포츠 경기 점수 등의 실시간 데이터를 클라이언트에게 푸시합니다.
	
	
Route 라우트 (미국식) 루트 (영국식) 

라우트는 웹 개발에서 
	클라이언트의 요청을 특정 처리기(handler)로 연결하는 규칙 또는 경로를 의미합니다.

라우트는 웹 애플리케이션에서 
	특정 URL 패턴과 그 패턴에 맞는 요청을 처리하는 함수를 연결하는 역할을 합니다. 
	
라우팅을 통해 
	웹 서버는 클라이언트의 요청이 어떤 요청인지 인식하고, 
	이에 적절한 처리를 수행할 수 있습니다.
	

라우팅의 주요개념
	1. 경로(Path): 
		경로는 URL의 일부로, 웹 서버가 특정 요청을 처리하는 데 사용됩니다. 
		예를 들어, /home, /about, /products 등이 경로에 해당합니다.
		예: http://example.com/home에서 /home이 경로입니다.
		
			FastAPI에서 "/" 경로를 사용하여 루트를 만들면, 
			이는 웹 애플리케이션의 기본 URL, 즉 홈페이지에 해당하는 경로를 설정하는 것입니다. 
			예를 들어, http://example.com/와 같은 URL을 처리하게 됩니다. 
			이렇게 설정된 라우트는 기본적으로 애플리케이션의 홈 페이지로 사용됩니다.
			"/" 경로는 애플리케이션에 대한 기본 정보를 제공하거나 초기 화면을 표시하는 데 사용됩니다.
		
	2. HTTP 메서드(HTTP Methods): 
		라우트는 특정 HTTP 메서드(GET, POST, PUT, DELETE 등)와 결합되어 사용됩니다. 
		각 메서드는 서버에 대한 요청의 성격을 정의합니다.
		예: GET /home은 /home 경로에 대한 GET 요청을 의미합니다.
		
	3. 처리 함수(Handler Function):
		각 라우트는 해당 경로와 HTTP 메서드에 대한 요청을 처리하는 함수를 가집니다. 
		이 함수는 요청을 받아서 응답을 반환합니다.
		
라우트의 장점
	1. 구조화된 코드:
		라우트를 사용하면 코드가 더 구조화되고 이해하기 쉬워집니다.
		요청을 처리하는 로직이 명확하게 분리되기 때문에 유지보수가 용이합니다.
	2. 확장성:
		새로운 기능을 추가할 때 새로운 경로와 처리 함수를 추가하면 되므로, 
		애플리케이션을 확장하기가 용이합니다.
	3. 유연성:
		다양한 경로와 HTTP 메서드를 조합하여 복잡한 웹 애플리케이션을 쉽게 설계할 수 있습니다.
		
간단한 FastAPI 애플리케이션 개발 예제
	1. 가상환경 활성화
	2. pip install fastapi uvicorn
		uvicorn : 애플리케이션을 실행하기 위한 비동기방식 서버
			비동기 작업방식은 하나의 작업 단위에서 요청과 응답이 이뤄지지 않는 방식이다.
	3. main.py 라는 파일을 다음과 같이 만든다.
	
	from fastapi import FastAPI
	
	'''
	FastAPI의 새 인스턴스를 생성하여 app 변수에 할당한다.
	이렇게 함으로써 웹 애플리케이션의 라우트 및 설정을 정의할 수 있는 엔트리 포인트가 됩니다.
		엔트리 포인트(Entry Point): 애플리케이션 실행을 시작하는 지점. 초기화와 설정을 담당.
	1. 라우트 정의 : 이 인스턴스를 통해 애플리케이션의 라우트를 정의하고 설정할 수 있습니다. 
	예를 들어, 특정 URL 경로와 해당 경로에 대한 요청을 처리하는 함수를 연결할 수 있습니다.
	2. 애플리케이션 설정 : 인스턴스는 애플리케이션 설정, 미들웨어 추가, 이벤트 핸들러 정의 등 
	다양한 설정을 할 수 있는 중심점 역할을 합니다.
	'''
	app = FastAPI()  
	
	4. 데코레이터를 사용해 처리 유형을 정의하고
	라우트가 호출됐을 때 실행할 처리를 함수로 작성한다.
	
	'''
	GET 요청을 받아서 환영 메시지를 반환하는 "/" 라우트를 생성합니다.
	다시 말해 "welcome" 함수가 "/" 경로에 대한 GET 요청을 처리합니다.
	'''

	# @app.get("/"): "/" 경로에 대한 GET 요청을 처리하는 라우트를 정의합니다. 
	# 데코레이터를 사용하여 이 경로와 HTTP 메서드를 FastAPI에 등록합니다.
	@app.get("/")
	# async def welcome() -> dict: 이 함수는 "/" 경로에 대한 GET 요청을 처리합니다. 
	# 비동기 함수로 정의되어 있으며, dict 타입의 응답을 반환합니다.
	async def welcome() -> dict:
		# return {"message": "Hello"}: JSON 형식의 환영 메시지를 반환합니다. 
		# 클라이언트는 이 메시지를 응답으로 받습니다.
		return {"message": "Hello"}
		
	5. 터미널에서 uvicorn 을 사용해 애플리케이션을 시작한다.
	uvicorn main:app --port 8000 --reload
		
		매개변수 설명
		file:instance 
		FastAPI 인스턴스가 존재하는 파이썬 파일:FastAPI 인스턴스를 가지고 있는 변수
		--port
		애플리케이션에 접속할 수 있는 포트번호 지정 (기본값은 8000 생략 가능)
		--reload
		파일 내용이 변경되어 저장될 때마다 애플리케이션을 재시작 (생략 가능)
		이 옵션은 개발 환경에서만 사용해야 하며, 운영 환경에서는 권장되지 않습니다
		
uvicorn: 애플리케이션을 실행하기 위한 비동기 방식 웹 서버
	Uvicorn은 고성능 비동기 웹 서버로, 주로 FastAPI와 같은 비동기 웹 프레임워크를 실행하는 데 사용됩니다. 
	이를 통해 웹 애플리케이션은 비동기 방식으로 요청을 처리할 수 있습니다.

		1. 비동기 방식(Asynchronous):
			비동기 방식은 요청과 응답을 처리하는 동안 블로킹이 발생하지 않도록 설계된 방식입니다. 
			이를 통해 여러 요청을 동시에 처리할 수 있으며, 응답 시간을 단축시킬 수 있습니다.
			예를 들어, 하나의 요청을 처리하는 동안 다른 요청도 동시에 처리할 수 있어 
			서버의 성능과 응답성이 향상됩니다.

		2. 웹서버:
		    Uvicorn은 ASGI(Asynchronous Server Gateway Interface)표준을 구현한 서버입니다.
		    ASGI는 비동기 프레임워크와 서버 간의 표준 인터페이스로, 
		    	기존의 WSGI(Web Server Gateway Interface)를 확장하여 비동기 웹 애플리케이션을 지원합니다.

		3. 애플리케이션 실행:
		    Uvicorn은 FastAPI와 같은 ASGI 기반 애플리케이션을 실행할 수 있는 서버입니다. 
		    	이를 통해 애플리케이션은 HTTP 요청을 받아들여 비동기 방식으로 처리할 수 있습니다.
        	
	6. 새 터미널에서 curl 을 사용해 GET 요청을 보내 테스트해본다.
	curl http://localhost:8000
	그러면 콘솔에서 "/" 핸들러에 정의한 환영메시지를 볼 수 있다.
	
curl : "Client URL"의 약자로, 커맨드 라인에서 데이터 전송을 위해 주로 사용하는 툴입니다.
	다양한 프로토콜을 지원하며, HTTP, HTTPS, FTP 등을 포함합니다. 
	주로 웹 서버와의 상호 작용을 테스트하거나 스크립트를 통해 데이터를 전송할 때 사용됩니다.

	curl http://localhost:8000 명령어의 의미
	HTTP 프로토콜을 통해 로컬 호스트의 8000번 포트로 GET 요청을 보냅니다. 
	이는 현재 로컬에서 실행 중인 서버에 요청을 보내는 것을 의미합니다.

	다시 말해 curl http://localhost:8000 명령어는 
	FastAPI 애플리케이션이 이미 실행 중이며, 
	http://localhost:8000/ 경로에 대한 GET 요청을 처리하는 라우트가 
	정의되어 있다는 것을 전제로 사용되는 명령어입니다.
	
	
uvicorn으로 fastapi 애플리케이션을 실행할 때 
왜 http://localhost:8000/ 에서 https로 적으면 안되는 이유
	Uvicorn을 사용하여 FastAPI 애플리케이션을 실행할 때 기본적으로 HTTP 프로토콜을 사용합니다. 
	HTTPS를 사용하려면 SSL 인증서를 설정하거나 Nginx와 같은 리버스 프록시 서버를 사용해야 합니다.
	기본 개발 환경에서는 HTTP를 사용하는 것이 더 간편하고, 운영 환경에서는 HTTPS 설정을 통해 보안을 강화해야 합니다.
	
	기본적으로 HTTP를 사용하는 이유
	
	1. 간편함과 개발 편의성:

		개발 환경에서는 SSL/TLS 인증서를 설정하지 않아도 되기 때문에 더 간편합니다.
		로컬 개발 환경에서는 보안이 그리 중요하지 않으므로 HTTP를 사용하는 것이 일반적입니다.
	
	2. 기본 HTTPS 지원 부족:

		Uvicorn은 기본적으로 HTTPS를 지원하지 않습니다. HTTPS를 사용하려면 SSL/TLS 인증서가 필요합니다.
		HTTPS를 직접 지원하려면 인증서와 키 파일을 설정해야 하는데, 이는 로컬 개발에서는 번거로울 수 있습니다.

	HTTPS로 Uvicorn 실행하기
		로컬 환경에서 FastAPI 애플리케이션을 HTTPS로 실행하려면 두 가지 방법이 있습니다.

		1. Uvicorn에서 SSL 인증서 사용:
			Uvicorn을 실행할 때 SSL 인증서와 키 파일을 지정할 수 있습니다.
		
			uvicorn main:app --host 0.0.0.0 --port 8000 --ssl-keyfile=path/to/keyfile --ssl-certfile=path/to/certfile

			여기서 --ssl-keyfile과 --ssl-certfile 옵션을 사용하여 SSL 인증서와 키 파일을 지정합니다. 
			로컬 개발에서는 자체 서명된 인증서를 사용할 수 있습니다
		
		2. 리버스 프록시 서버 사용 (예: Nginx):
			Nginx와 같은 리버스 프록시 서버를 사용하여 HTTPS 요청을 처리하고, 이를 Uvicorn 서버로 전달합니다.
			
			server {
				listen 443 ssl;
				server_name yourdomain.com;

				ssl_certificate /path/to/certfile;
				ssl_certificate_key /path/to/keyfile;

				location / {
					proxy_pass http://localhost:8000;
					proxy_set_header Host $host;
					proxy_set_header X-Real-IP $remote_addr;
					proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
					proxy_set_header X-Forwarded-Proto $scheme;
				}
			}
			이 설정은 Nginx가 HTTPS 요청을 처리하고, Uvicorn 서버로 HTTP 요청을 전달합니다.
			
			
책 챕터2 라우팅

	라우팅은 클라이언트가 서버로 보내는 HTTP 요청을 처리하는 프로세스다.
	HTTP 요청이 지정한 라우트로 전송되면 
	(애플리케이션은 route handler가 요청을 처리하기 전에 해당 라우트가 정의되어 있는지 확인하고)
	미리 정의된 로직인 route handler가 해당 요청을 처리해서 반환(응답)한다.
	라우팅은 클라이언트 요청을 HTTP 메서드 종류와 라우트에 맞게 분배하는 것을 의미한다.
	
2.2 APIRouter 클래스를 사용한 라우팅

	APIRouter의 사용 이유 chatGPT
	APIRouter 클래스를 통해 애플리케이션 라우팅과 로직을 독립적으로 구성하고 모듈화할수 있다.
	
	1. 모듈화:
	APIRouter를 사용하면 라우트를 여러 모듈로 나눌 수 있습니다. 
	이를 통해 각 모듈이 독립적으로 관리될 수 있으며, 코드베이스가 커지더라도 유지보수가 용이해집니다.
	
	2. 구조화:
	서로 관련된 라우트를 그룹화하여 코드 구조를 체계적으로 만들 수 있습니다. 
	예를 들어, 사용자 관련 라우트, 상품 관련 라우트 등을 각각의 라우터로 분리할 수 있습니다.
	
	3. 재사용성:
	동일한 라우터를 여러 애플리케이션에서 재사용할 수 있습니다. 
	이를 통해 코드 중복을 줄이고, 공통 기능을 중앙에서 관리할 수 있습니다.
	
	4. 데코레이터 사용의 단순화
	APIRouter는 FastAPI 애플리케이션 객체와 유사한 방식으로 데코레이터를 사용하여 라우트를 정의할 수 있습니다. 
	이는 일관된 방식으로 라우트를 정의하는 데 도움이 됩니다
	
	예시코드
	
	기본 FastAPI() 인스턴스로 라우팅
	
		from fastapi import FastAPI

		app = FastAPI()

		@app.get("/users")
		async def read_users():
			return [{"username": "user1"}, {"username": "user2"}]

		@app.get("/items")
		async def read_items():
			return [{"item_id": "item1"}, {"item_id": "item2"}]
		
	APIRouter를 사용한 예제
	
		from fastapi import FastAPI, APIRouter

		app = FastAPI()

		# 사용자 관련 라우트 정의
		user_router = APIRouter()

		@user_router.get("/users")
		async def read_users():
			return [{"username": "user1"}, {"username": "user2"}]

		# 상품 관련 라우트 정의
		item_router = APIRouter()

		@item_router.get("/items")
		async def read_items():
			return [{"item_id": "item1"}, {"item_id": "item2"}]

		# APIRouter 인스턴스를 FastAPI 애플리케이션에 포함
		app.include_router(user_router)
		app.include_router(item_router)
		
	모듈화된 예제
	user_router 모듈 (user.py)
		from fastapi import APIRouter

		user_router = APIRouter()

		@user_router.get("/users")
		async def read_users():
			return [{"username": "user1"}, {"username": "user2"}]
			
	item_router 모듈 (item.py)
		from fastapi import APIRouter

		item_router = APIRouter()

		@item_router.get("/items")
		async def read_items():
			return [{"item_id": "item1"}, {"item_id": "item2"}]
	
	main 모듈 (main.py)
		from fastapi import FastAPI
		from user import user_router
		from item import item_router

		app = FastAPI()

		# APIRouter 인스턴스를 FastAPI 애플리케이션에 포함
		app.include_router(user_router)
		app.include_router(item_router)


Uvicorn은 APIRouter 인스턴스를 직접 실행할 수 없습니다. 
APIRouter로 정의한 라우트는 FastAPI 인스턴스에 포함되어야 하며, Uvicorn은 이 FastAPI 인스턴스를 실행합니다.

include_router() 메서드는 APIRouter 클래스로 정의한 라우트를 메인 애플리케이션의 인스턴스로 추가한다.

테스트
conda activate holdem
cd fastapi/ch02/todos
curl http://127.0.0.1:8000/
curl -X 'GET' 'http://127.0.0.1:8000/todo' -H 'accept: application/json'
curl -X 'POST' 'http://127.0.0.1:8000/todo' -H 'accept: application/json' -H 'Content-Type: application/json' -d '{
"id": 1,
"item": "First Todo is to finish this book!"
}'

HTTP 메서드 지정:

	1. -X 'POST': POST 요청을 보냅니다.
	2. 헤더 설정:
	-H 'accept: application/json': 서버가 JSON 형식의 응답을 기대하도록 설정합니다.
	-H 'Content-Type: application/json': 요청 본문이 JSON 형식임을 명시합니다.
	3. 데이터 전송:
	-d '{...}': 요청 본문에 JSON 데이터를 포함시킵니다. JSON 데이터는 큰따옴표 안에 있어야 합니다.
	
	
2.3 pydantic 모델을 사용한 요청 바디 검증

Pydantic은 파이썬의 타입 어노테이션을 사용하여 데이터를 검증하고 설정하는 파이썬 라이브러리입니다. 
FastAPI에서는 Pydantic 모델을 사용하여 요청 바디를 검증할 수 있습니다. 
이를 통해 정의된 데이터만 전송되도록 할 수 있으며, 이는 매우 중요한 기능입니다. 
요청 데이터의 유효성을 확인하고 악의적인 공격의 위험을 줄여주기 때문입니다.

	chatGPT
	FastAPI에서 Pydantic 모델은 
	주로 요청 바디(Request Body)와 응답 데이터(Response Data)를 검증하는 데 사용됩니다. (아래 reseponse_model 참고)
	 이 두 용어는 HTTP 요청과 응답의 일부분으로, 
	 웹 애플리케이션의 클라이언트와 서버 간의 데이터를 주고받는 데 중요한 역할을 합니다.

	요청 바디 (Request Body)
		요청 바디는 클라이언트가 서버로 전송하는 데이터입니다.
		일반적으로 POST, PUT, PATCH 등의 HTTP 메서드를 사용할 때 포함됩니다. 
		이 데이터는 보통 JSON 형식으로 전송되며, 
		서버에서 처리해야 할 리소스의 생성, 업데이트 등에 필요한 정보를 담고 있습니다.

		클라이언트가 새로운 사용자를 생성하기 위해 서버로 보낸 요청:
		{
			"name": "Charlie",
			"age": 28
		}

		서버는 이 데이터를 요청 바디로 받아 새로운 사용자를 생성합니다.

	응답 데이터 (Response Data)
		응답 데이터는 서버가 클라이언트의 요청에 대해 응답으로 전송하는 데이터입니다. 
		서버는 요청을 처리한 후 결과를 응답 데이터로 클라이언트에 반환합니다. 
		이 데이터 역시 보통 JSON 형식으로 전송됩니다.

		서버가 사용자 정보를 반환하는 응답:
		{
			"id": 1,
			"name": "Charlie",
			"age": 28
		}


요청 바디용 모델을 생성하는 방법


	FastAPI에서 모델은 데이터가 어떻게 전달되고 처리돼야 하는 지를 정의하는 구조화된 클래스다
	모델은 Pydanrtic의 BaseModel 클래스의 하위 클래스로 생성된다.
	모델은 요청 바디 객체와 요청 응답 객체 유형에 관한 힌트를 제공한다.
	cd fastapi/ch02/todos 참고

	# model.py
	class Todo(BaseModel):
		id: int
		item: str

	아래는 아이템을 todo_list에 추가하는 라우트를 정의한 코드다.
	이 라우트는 요청바디를 딕셔너리로 받는다.

	# todo.py
	@todo_router.post("/todo")
	async def add_todo(todo: dict) -> dict:
		todo_list.append(todo)
		return {
		    "message": "Todo added successfully."
		}

	POST 요청 예제에서는 다음과 같은 형식으로 데이터를 보냈다
	curl -X 'POST' 'http://127.0.0.1:8000/todo' -H 'accept: application/json' -H 'Content-Type: application/json' -d '{
	"id": 1,
	"item": "First Todo is to finish this book!"
	}'

	위 대로라면 빈 딕셔너리를 보내도 아무런 오류가 발생하지 않는다.

	위에서 정의한 Pydanrtic 모델을 사용해서 요청바디를 검증하게끔 바꾸려면

	todo.py 모듈에

	from model import Todo 를 하여 Pydanrtic 모델을 임포트한 후
	요청 바디의 변수 유형을 dict에서 Todo로 변경한다.

	@todo_router.post("/todo")
	async def add_todo(todo: Todo) -> dict:
		todo_list.append(todo)
		return {
		    "message": "Todo added successfully."
		}
	
	이제 빈 딕셔너리를 요청 바디로 보내면 오류가 반환되고
	모델과 일치하는 데이터를 보내면 정상적인 응답을 받게 된다
	
	또한 pydantic 모델은 중첩해서 정의 가능하다.
	
	class Item(BaseModel)
		item: str
		status: str
	
	class Todo(BaseModel)
		id: int
		item: Item
		
	이렇게 하면 결과적으로 Todo형 데이터는 다음과 같이 표현된다
	{
		"id":1,
		"item":{
			"item": "Nested Models",
			"status": "completed"
		}
	}

2.4 경로 매개변수와 쿼리 매개변수

아래 라우트는 todo_list를 추출하는 라우트다.

@todo_router.get("/todo")
async def retrieve_todo() -> dict:
    return {
        "todos": todo_list
    }

이제 todo_list에서 하나의 todo만 추출하는 새로운 라우트를 만들수 있다.

@todo_router.get("/todo/{todo_id}")
async def get_single_todo(todo_id: int) -> dict: 

여기서 {todo_id} 가 바로 경로 매개변수다.
경로 매개변수는 식별자 역할을 한다.
이 매개 변수를 통해 애플리케이션이 지정한 ID와 일치하는 todo를 반환할 수 있다. 

    for todo in todo_list:
        if todo.id == todo_id:
            return {
                "todo": todo
            }
    return {
        "message": "Todo with supplied ID doesn't exist."
    }
    
테스트
curl -X 'GET' 'http://127.0.0.1:8000/todo/1' -H 'accept: application/json'


다음과 같이 Path 클래스를 추가할 수도 있다.
async def get_single_todo(todo_id: int = Path(..., title="The ID of the todo to retrieve.")) 

chatGPT
FastAPI에서 Path 클래스를 사용하는 이유는 경로 매개변수(path parameters)에 대한 검증과 메타데이터를 제공하기 위해서입니다. 
Path 클래스를 사용하면 경로 매개변수에 대해 유효성 검사를 수행하고, 기본값을 설정하며, 
설명(description)과 예시(example)와 같은 메타데이터를 추가할 수 있습니다.
FastAPI에서 Path 파라미터는 기본적으로 원시 데이터 타입(int, str 등)을 사용하는 것이 일반적입니다. 
경로 매개변수는 단일 값이어야 합니다.

FastAPI에서 Path 클래스를 사용하여 경로 매개변수에 대한 메타데이터를 추가하면, 
이 정보는 자동으로 생성되는 문서화 도구(Swagger UI 및 Redoc)에 반영됩니다.
 이를 통해 API 사용자가 각 매개변수의 의미를 쉽게 이해할 수 있게 됩니다.
FastAPI에서 title을 사용하여 경로 매개변수에 대한 설명을 추가했을 때, 
Redoc에서는 이 설명이 잘 표시되지만, Swagger UI에서는 title 정보가 기본적으로 표시되지 않는 경우가 있습니다. 
이 문제는 Swagger UI의 한계로 인해 발생할 수 있습니다.
이를 해결하기 위해 FastAPI에서는 description을 사용하여 경로 매개변수에 대한 설명을 추가할 수 있습니다. 

async def get_single_todo(todo_id: int = Path(..., description="The ID of the todo to retrieve.")) -> dict:


Path 클래스에서 사용하는 ...은 필수 매개변수임을 나타내는 방식입니다. 
기본값이 없는 필수 매개변수를 선언할 때 사용됩니다. Pydantic에서 이 의미는 값이 반드시 제공되어야 한다는 것을 나타냅니다. 
여기에서 ...는 기본적으로 "Ellipsis" 객체이며, 이 객체는 "값이 필수임"을 나타냅니다.
즉 todo_id가 필수 매개변수임을 나타냅니다. 이는 함수가 호출될 때 반드시 값이 제공되어야 함을 의미합니다.
description="The ID of the user to get": Swagger UI와 Redoc에서 매개변수의 설명으로 사용됩니다.

또한 경로매개변수가 숫자면 수치검증을 위한 인수를 지정할 수 있다.
todo_id: int = Path(..., description="The ID of the todo to retrieve.", ge=1)
ge=1: todo_id는 1 이상의 정수여야 함을 나타냅니다.
이를 통해 경로 매개변수에 사용된 값이 특정 범위에 있는 숫자인지 검증 가능하다.


FastAPI 자동 문서화
스웨거 : /docs
ReDoc : /redoc

JSON 스키마를 올바르게 생성하기 위해
사용자가 입력해야할 데이터의 샘플을 설정할 수 있다.
샘플 데이터는 pydantic 모델 클래스 안에 Config 클래스로 정의하면 된다.

# model.py
class Todo(BaseModel):
    id: int
    item: str

    class Config:
        json_schema_extra = {
            "example": {
                "id": 1,
                "item": "Example Schema!"
            }
        }
        
스웨거의 요청 바디에서 example value 또는 redoc의 Request samples에서 확인할 수 있다.

2.6 기존 아이템을 변경,삭제하는 라우트 추가
UPDATE

UPDATE 라우트의 요청 바디용 모델을 model.py에 추가한다.

class TodoItem(BaseModel):
    item: str

    class Config:
        json_schema_extra = {
            "example": {
                "item": "Read the next chapter of the book"
            }
        }

todo를 변경하기 위한 라우트를 todo.py에 추가한다

@todo_router.put("/todo/{todo_id}")
async def update_todo(todo_data: TodoItem, todo_id: int = Path(..., description="The ID of the todo to be updated.")) -> dict:
    for todo in todo_list:
        if todo.id == todo_id:
            todo.item = todo_data.item
            return {
                "message": "Todo updated successfully."
            }
    return {
        "message": "Todo with supplied ID doesn't exist."
    }


테스트
curl -X 'POST' 'http://127.0.0.1:8000/todo' -H 'accept: application/json' -H 'Content-Type: application/json' -d '{"id": 2, "item": "UNITY 책 읽기"}'

추가한 아이템 변경

curl -X 'PUT' 'http://127.0.0.1:8000/todo/2' -H 'accept: application/json' -H 'Content-Type: application/json' -d '{"item": "UNITY 2D 게임제작 책읽기"}'

curl -X 'GET' 'http://127.0.0.1:8000/todo/2' -H 'accept: application/json'


삭제를 위한 DELETE 라우트를 추가


@todo_router.delete("/todo/{todo_id}")
async def delete_single_todo(todo_id: int) -> dict:
    for index in range(len(todo_list)):
        todo = todo_list[index]
        if todo.id == todo_id:
            todo_list.pop(index)
            return {
                "message": "Todo deleted successfully."
            }
    return {
        "message": "Todo with supplied ID doesn't exist."
    }


@todo_router.delete("/todo")
async def delete_all_todo() -> dict:
    todo_list.clear()
    return {
        "message": "Todos deleted successfully."
    }


테스트

curl -X 'DELETE' 'http://127.0.0.1:8000/todo/2' -H 'accept: application/json'




chatGPT
response_model

예제코드
# models.py  모델 정의

	from pydantic import BaseModel

	'''
	User 및 UserCreate 모델을 정의하여 데이터 구조를 명시합니다
	User 모델은 응답 데이터의 스키마를 정의합니다.
	UserCreate 모델은 요청 바디의 스키마를 정의합니다.
	'''

	# User 클래스는 Pydantic 모델로 정의되어 있습니다.
	# 사용자의 전체 데이터를 정의합니다. id, name, age 필드를 포함합니다.

	class User(BaseModel):
		id: int
		name: str
		age: int

	# UserCreate 클래스는 사용자를 생성할 때 필요한 데이터를 정의합니다. 
	# 이 클래스는 id 필드를 포함하지 않으며, 사용자의 이름과 나이만 포함합니다.
	class UserCreate(BaseModel):
		name: str
		age: int



# routes.py 라우터 정의
	# APIRouter 인스턴스를 사용하여 경로 및 핸들러 함수를 정의합니다

	from fastapi import APIRouter, HTTPException, Path
	from models import User, UserCreate

	router = APIRouter()

	# 샘플 사용자 데이터베이스 (딕셔너리 형태)
	users_db = {
		1: {"id": 1, "name": "Alice", "age": 30},
		2: {"id": 2, "name": "Bob", "age": 25}
	}

	'''
	@router.get("/users/{user_id}", response_model=User): 특정 사용자 ID에 대한 정보를 반환하는 GET 엔드포인트입니다.
	read_user 함수는 경로 매개변수로 전달된 user_id를 사용하여 
	데이터베이스에서 사용자를 찾고, 사용자가 존재하지 않으면 HTTPException을 발생시킵니다.
	'''
	@router.get("/users/{user_id}")
	async def read_user(
		user_id: int = Path(..., description="The ID of the user to get", ge=1)
	):
		user = users_db.get(user_id)
		if user is None:
		    raise HTTPException(status_code=404, detail="User not found")
		return user

	'''
	@router.post("/users/", response_model=User): 새로운 사용자를 생성하는 POST 엔드포인트입니다. 
	요청 바디로 UserCreate 모델을 사용하여 데이터를 받습니다.
	'''
	@router.post("/users/")
	async def create_user(user: UserCreate):
		new_id = max(users_db.keys()) + 1
		new_user = {"id": new_id, **user.dict()}
		users_db[new_id] = new_user
		return new_user



# main.py 응용 프로그램 설정
	# FastAPI 인스턴스에 라우터를 포함시켜 API 엔드포인트를 설정합니다.

	from fastapi import FastAPI
	from routes import router

	app = FastAPI()

	'''
	FastAPI 인스턴스에 APIRouter를 포함시켜 API 엔드포인트를 설정합니다.
	'''
	app.include_router(router)



동작 과정:
	1. 요청:
	클라이언트가 /users/1과 같은 요청을 보냅니다.

	2. 데이터 조회:
	user_id에 해당하는 사용자를 데이터베이스(여기서는 딕셔너리)에서 조회합니다.

	3. 응답 데이터 검증:
	조회된 데이터는 User 모델의 인스턴스로 반환됩니다.
	FastAPI는 이 응답 데이터가 User 모델과 일치하는지 검증합니다.
	만약 응답 데이터가 User 모델의 스키마를 따르지 않으면 오류가 발생합니다.

	4. 자동 문서화:
	Swagger UI와 Redoc에서 이 엔드포인트의 응답 스키마를 명확히 보여줍니다.
	


response_model을 사용하지 않아도 FastAPI는 정상적으로 동작합니다. 
response_model을 사용하는 여부는 
APIRouter를 사용하든 기본 FastAPI 애플리케이션 인스턴스를 사용하든 동일한 방식으로 적용됩니다. 
즉, response_model을 사용하는 목적과 용법은 변하지 않습니다.

response_model을 사용하면 다음과 같은 이점이 있습니다:

	1. 응답 데이터 검증:
		response_model은 엔드포인트가 반환하는 데이터가 지정된 Pydantic 모델을 따르는지 검증합니다. 
		이렇게 하면 응답 데이터가 예상된 구조와 형식을 갖추도록 보장할 수 있습니다.
		
	2. 자동 문서화:
		FastAPI는 response_model을 기반으로 자동 문서를 생성합니다. 
		Swagger UI와 Redoc에서 응답 데이터의 스키마를 명확히 보여줍니다.
		
	3. 데이터 직렬화 및 필터링:
		response_model을 사용하면 FastAPI가 Pydantic 모델을 사용하여 데이터 직렬화 및 필터링을 수행합니다. 
		이 과정에서 모델에 정의되지 않은 필드는 자동으로 필터링됩니다.


바뀌는 부분 
	# models.py 는 동일
	# main.py 도 동일

	# routes.py 에서 데코레이터 변경

	'''
	@router.get("/users/{user_id}", response_model=User):
	이 엔드포인트는 특정 user_id에 해당하는 사용자의 정보를 반환합니다.
	response_model=User는 이 엔드포인트가 반환하는 응답 데이터의 스키마를 정의합니다.
	다시 말해 이 엔드포인트가 반환하는 응답 데이터가 User 모델의 형식을 따를 것임을 명시합니다.
	(응답 데이터가 User 모델과 일치하는지 검증합니다)
	(응답 데이터는 User 모델을 따릅니다)
	'''

	@router.get("/users/{user_id}", response_model=User)
	async def read_user(
		user_id: int = Path(..., description="The ID of the user to get", ge=1)
	):
		user = users_db.get(user_id)
		if user is None:
		    raise HTTPException(status_code=404, detail="User not found")
		return user


	'''
	(응답 데이터는 User 모델을 따릅니다)
	'''
	@router.post("/users/", response_model=User)
	'''
	user: UserCreate
	UserCreate Pydantic 모델을 사용하여 요청 바디의 유효성을 검증합니다.
	'''
	async def create_user(user: UserCreate):
		new_id = max(users_db.keys()) + 1
		new_user = {"id": new_id, **user.dict()}
		users_db[new_id] = new_user
		return new_user
    
response_model 인자는 FastAPI에서 사용되는 매우 중요한 기능으로, 
엔드포인트가 반환할 응답 데이터의 스키마를 정의하는 데 사용됩니다. 
이를 통해 응답 데이터가 예상되는 형식을 따르고 있는지 검증할 수 있으며, 
자동 문서화 도구에 이 정보를 제공하여 API 문서를 생성할 때 유용합니다.    

따라서 가능하면 response_model을 사용하는 것이 좋습니다. 
response_model을 사용하면 코드의 신뢰성과 유지보수성이 크게 향상됩니다.


이처럼 FastAPI에서는 경로 매개변수와 요청 바디에 대해 적절한 타입과 모델을 사용하는 것이 중요합니다. 
경로 매개변수에는 기본 타입을 사용하고, 
요청 바디에는 Pydantic 모델을 사용하여 데이터의 유효성을 검증하는 것이 일반적인 패턴입니다.



책 챕터3 응답 모델과 오류처리

3.1
응답모델 response_model은 API 라우트 경로가 반환하는 데이터의 템플릿 역할을 하며
서버에 전달된 요청을 기준으로 적절한 응답을 렌더링하기 위해 Pydantic을 사용한다

API 응답은 보통 JSON 또는 XML 형식이지만
문서 형식으로 전달되기도 하며
헤더와 바디로 구성된다.

응답 헤더 response header
	예시
	content-length: 61 
	content-type: application/json 
	date: Thu,16 May 2024 06:24:35 GMT 
	server: uvicorn 
	
응답 바디 response body
	예시
	{
	  "todos": [
		{
		  "id": 2,
		  "item": "UNITY 2D 게임제작 책읽기"
		}
	  ]
	}

	응답 바디의 형식은 Content-type 헤더에 의해 결정되며 대표적인 예로 application/json이 있다.

상태코드 code
상태 코드는 서버가 반환한 응답에 포함되는 짧은 고유 코드이다.
예시
1XX : 요청을 받았다
2XX : 요청을 성공적으로 처리했다.   INFO:     127.0.0.1:39052 - "GET /todo/2 HTTP/1.1" 200 OK
3XX : 요청을 리다이렉트했다.
4XX : 클라이언트 측에 오류가 있다       INFO:     127.0.0.1:47814 - "GET /favicon.ico HTTP/1.1" 404 Not Found
5XX : 서버 측에 오류가 있다. 

200 OK: 요청이 성공적으로 처리되었습니다. 주로 GET 요청에 사용됩니다.
201 Created: 새로운 리소스가 성공적으로 생성되었습니다. 주로 POST 요청에 사용됩니다.
204 No Content: 요청이 성공적으로 처리되었지만, 반환할 콘텐츠가 없습니다. 주로 DELETE 요청이나 PUT 요청 후 사용됩니다.
400 Bad Request: 잘못된 요청입니다. 클라이언트의 요청에 오류가 있을 때 사용됩니다.
404 Not Found: 요청한 리소스를 찾을 수 없습니다.
500 Internal Server Error: 서버에서 처리 중 오류가 발생했습니다

	
	
3.2
아래 라우트는 모든 todo 딕셔너리 리스트를 반환한다.
@todo_router.get("/todo")
async def retrieve_todo() -> dict:
    return {
        "todos": todo_list
    }	

response_model 을 사용하면 원하는 필드만 반환하도록 할 수 있다.
id는 제외하고 item 목록만 반환하게 하는 pydantic 모델로 작성한다.

# model.py

class Todo(BaseModel):
    id: int
    item: str
    
class TodoItem(BaseModel):
    item: str
    
class TodoItems(BaseModel):
    todos: List[TodoItem]
    
이렇게 하면
TodoItems 모델은 todos 필드에 List[TodoItem]을 포함하고 있으므로, 
응답 데이터는 TodoItem 모델의 필드만을 포함하게 됩니다. 
이 경우, TodoItem 모델은 item 필드만을 가지고 있으므로, 
응답에서 id 필드는 제외되고 item 목록만 반환됩니다.


	두 클래스를 하나의 클래스로 병합하는 것은 불가능합니다. 
	TodoItem과 TodoItems는 각각의 목적을 가진 독립적인 데이터 구조를 나타내기 때문에, 
	이 둘을 하나의 클래스로 만드는 것은 불합리합니다. 

response_model=TodoItems를 사용하게 되면 Pydantic 모델이 중첩됩니다. 
즉, TodoItems 모델 안에 TodoItem 모델이 포함된 형태가 됩니다. 
이는 FastAPI가 응답 데이터의 구조를 검증하고 직렬화할 때 
중첩된 Pydantic 모델을 올바르게 처리하도록 해줍니다.
    중첩된 모델의 이점
	유효성 검사: 중첩된 구조로 인해 각 TodoItem 항목의 유효성을 개별적으로 검사할 수 있습니다.
	자동 문서화: FastAPI는 중첩된 모델을 기반으로 OpenAPI 스키마를 생성하여, API 문서화 도구(Swagger UI 및 Redoc)에서 이를 명확하게 표시합니다.
	일관된 데이터 구조: 응답 데이터가 예측 가능하고 일관된 구조를 가지므로, 클라이언트 측에서 데이터를 처리하기 쉽습니다.
# todo.py

from model import Todo, TodoItem, TodoItems

@todo_router.get("/todo", response_model=TodoItems)
async def retrieve_todo() -> dict:
    return {
        "todos": todo_list
    }
    
  
    
3.3 오류처리

FastAPI에서 오류는
FastAPI의 HTTPException 클래스를 사용해 예외exception 를 발생시켜 처리한다.
HTTP 예외는 요청 흐름 상에 발생하는 오류나 문제를 가리키는 이벤트다.

HTTPException 클래스는 다음 세 개의 인수를 받는다.
status_code : 예외처리 시 반환할 상태 코드
detail: 클라이언트에게 전달한 메시지
headers : 헤더를 요구하는 응답을 위한 선택적 인자


현재 todo 라우트 경로 정의에서는 todo가 존재하지 않으면 메시지를 반환한다.

@todo_router.get("/todo/{todo_id}")
async def get_single_todo(todo_id: int = Path(..., description="The ID of the todo to retrieve.")) -> dict:
    for todo in todo_list:
        if todo.id == todo_id:
            return {
                "todo": todo
            }
    return {
        "message": "Todo with supplied ID doesn't exist."
    }

상태 코드도 200을 반환한다.

아래와 같이 변경하면
상태코드 404를 반환하고 상태 메시지도 Error: Not Found 로 나온다.

@todo_router.get("/todo/{todo_id}")
async def get_single_todo(todo_id: int = Path(..., title="The ID of the todo to retrieve.")) -> dict:
    for todo in todo_list:
        if todo.id == todo_id:
            return {
                "todo": todo
            }
    raise HTTPException(
        status_code=status.HTTP_404_NOT_FOUND,
        detail="Todo with supplied ID doesn't exist",
    )
    
FastAPI를 사용하면 데코레이터에서 쉽게 상태 코드를 설정할 수 있으며, 이를 통해 API의 행동을 명확하게 정의할 수 있다.
아래와 같이 데코레이터 함수에 status_code 인자를 추가해도 된다.
201 Created 상태 코드를 사용하면 새로운 리소스가 성공적으로 생성되었음을 나타냅니다

@todo_router.post("/todo", status_code=201)
async def add_todo(todo: Todo):
    todo_list.append(todo.dict())
    return {
        "message": "Todo added successfully."
    }
    
    

책 챕터4 템플릿팅
jinja
패스

책 챕터5 구조화
애플리케이션의 구조와 기능이 복잡해지면 애플리케이션을 적절하게 구조화해야한다.


플래너 애플리케이션을 구현해보자
	등록된 사용자는 이벤트를 추가, 변경, 삭제할 수 있고
	애플리케이션이 자동으로 만든 이벤트페이지에서 생성된 이벤트를 확인할 수 있다.
	등록된 사용자와 이벤트는 모두 고유한 ID를 갖는다
	따라서 사용자와 이벤트가 중복되는 걸 방지할 수 있다.
	여기서는 인증 및 데이터베이스 관리를 다루지 않는다 (챕터6, 7에서 다룸)

다음과 같은 구조로 플래너 애플리케이션을 설계한다.

planner/
	main.py
	database/
		__init__.py
		connection.py : 데이터베이스 추상화와 설정에 사용
	routes/
		__init__.py
		events.py : 이벤트 생성, 변경, 삭제 등의 처리를 위한 라우팅
		users.py : 사용자 등록 및 로그인 처리를 위한 라우팅
	models/
		__init__.py
		events.py : 이벤트 처리용 모델을 정의
		users.py : 사용자 처리용 모델을 정의

모델 구현

	애플리케이션의 첫단계는 이벤트 모델과 사용자 모델을 정의하는 것이다.

	사용자모델과 이벤트모델의 관계도

	사용자
	-이메일
	-패스워드
	-이벤트ㅡㅡㅡ이벤트
				-id
				-제목
				-이미지
				-설명
				-태그
				-위치

	# event.py		
	from typing import List
	from pydantic import BaseModel


	class Event(BaseModel):
		id: int # 고유식별자
		title: str # 이벤트 타이틀
		image: str # 이벤트 이미지 배너의 링크
		description: str # 이벤트 설명
		tags: List[str] # 그룹화를 위한 이벤트 태그
		location: str # 이벤트 위치
	'''
	Event 클래스 안에 Config 서브 클래스를 추가한다. 
	문서화시 샘플 데이터를 보여주기 위한 용도
	API를 통해 신규 이벤트를 생성할 때 참고할 수 있다.
	'''
		class Config:
		    json_schema_extra = {
		        "example": {
		        	"id" : 1
		            "title": "FastAPI Book Launch",
		            "image": "https://linktomyimage.com/image.png",
		            "description": "We will be discussing the contents of the FastAPI book in this event.Ensure to come with your own copy to win gifts!",
		            "tags": ["python", "fastapi", "book", "launch"],
		            "location": "Google Meet"
		        }
		    }
		 
	# user.py

	from pydantic import BaseModel, EmailStr
	from typing import Optional, List
	from models.events import Event


	class User(BaseModel):
	
		email: EmailStr
		password: str
	    events: Optional[List[Event]]  # 사용자가 생성한 이벤트
		'''
		events: Optional[List[Event]]는 타입 힌트(type hint)로, 
		Python의 typing 모듈을 사용하여
		events 변수가 Event 객체들의 리스트이거나 None일 수 있다는 걸 나타냅니다.
		Optional: 값이 없을 수도 있음을 나타냅니다. 즉, None일 수도 있다는 뜻입니다.
		Optional[X]는 Union[X, None]과 동일합니다.
		List는 typing 모듈에서 가져온 제네릭 타입으로
		특정 타입의 요소들을 포함하는 리스트를 나타냅니다. 
		여기서는 Event 타입의 요소들을 포함하는 리스트입니다.
		따라서 Optional[List[Event]]은 List[Event] 타입이거나 None일 수 있습니다.
		
		events: Optional[List[Event]]는 기본값이 설정되지 않은 필드로, 필수 입력 필드가 됩니다. 
		따라서 HTTP 요청에서 반드시 포함해야 합니다
		만약 events 필드를 생략하면 유효성 검사 오류가 발생합니다.
		events: Optional[List[Event]] = None는 기본값이 None으로 설정된 필드로, 선택 입력 필드가 됩니다. 
		따라서 HTTP 요청에서 events필드를 생략할 수 있습니다.
		
		제네릭 타입(generic type)은 타입 파라미터를 사용하여 
		다양한 타입에 대해 일반화된 동작을 정의할 수 있는 타입입니다. 
		제네릭 타입은 특정 타입에 국한되지 않고, 다양한 타입을 받아들일 수 있는 일반화된 구조를 제공합니다. 
		예를 들어, 리스트는 정수, 문자열, 사용자 정의 객체 등 어떤 타입의 요소도 포함할 수 있습니다. 
		제네릭 타입을 사용하면 이러한 구조를 정의할 때 타입 안전성을 유지할 수 있습니다.
		Python의 typing 모듈은 이러한 제네릭 타입을 정의할 수 있는 도구들을 제공합니다.
		제네릭 타입의 장점
		코드 재사용성: 제네릭 타입을 사용하면 동일한 코드를 여러 타입에 대해 재사용할 수 있습니다.
		타입 안전성: 컴파일 타임 또는 런타임에 타입 검사를 수행하여 잠재적인 타입 오류를 방지할 수 있습니다.
		가독성: 코드의 타입 정보를 명확히 하여 가독성을 높일 수 있습니다.
		도구 지원: IDE와 린터가 타입 정보를 활용하여 코드 작성 시 자동 완성, 타입 검사 등을 지원합니다.
		'''
		class Config:
		    json_schema_extra = {
		        "example": {
		            "email": "fastapi@packt.com",
		            "password": "strong!!!",
		            "events": [],
		        }
		    }

	# 사용자 로그인 모델
	class UserSignIn(BaseModel):
		email: EmailStr
		password: str
		
		class Config:
		    json_schema_extra = {
		        "example": {
		            "email": "fastapi@packt.com",
		            "password": "strong!!!",
		            }
			}
    
    
라우트 구현
	먼저 사용자 라우트 시스템을 설계해보자.
	사용자 라우트는 로그인, 로그아웃, 등록으로 구성된다.
	인증을 완료한 사용자는 이벤트를 생성, 변경, 삭제할 수 있으며
	인증을 거치지 않은 사용자는 생성된 이벤트를 확인하는 것만 가능하다

	사용자 라우트와 이벤트 라우트의 관계
	사용자
	-signup
	-signinㅡㅡㅡ이벤트
	-signout	 -생성
				 -조회
				 -변경
				 -삭제
			 
사용자 라우트 정의
	# user.py
	from fastapi import APIRouter, HTTPException, status

	from models.users import User, UserSignIn
	'''
	tags 인자는 FastAPI의 APIRouter 또는 엔드포인트 데코레이터에서 사용됩니다. 
	이를 통해 특정 엔드포인트나 라우터를 하나의 그룹으로 묶어 문서화할 수 있습니다. 
	예를 들어, 모든 사용자 관련 엔드포인트를 "User" 태그로 그룹화할 수 있습니다

	이 설정을 사용하면 Swagger UI 및 Redoc에서 다음과 같이 표시됩니다:
	User 태그 아래에 /users/ GET 및 POST 엔드포인트가 표시됩니다.
	이는 API 사용자가 사용자 관련 엔드포인트를 쉽게 찾을 수 있게 도와줍니다.
	'''
	user_router = APIRouter(
		tags=["User"],
	)

	users = {}

	# 등록 라우트
	@user_router.post("/signup")
	async def sign_user_up(data: User) -> dict:
		if data.email in users:
		    raise HTTPException(
		        status_code=status.HTTP_409_CONFLICT,
		        detail="User with supplied username exists"
		    )

		users[data.email] = data

		return {
		    "message": "User successfully registered!"
		}
		
	# 로그인 라우트
	@user_router.post("/signin")
	async def sign_user_in(user: UserSignIn) -> dict:
		if user.email not in users:
		    raise HTTPException(
		        status_code=status.HTTP_404_NOT_FOUND,
		        detail="User does not exist"
		    )

		if users[user.email].password != user.password:
		    raise HTTPException(
		        status_code=status.HTTP_403_FORBIDDEN,
		        detail="Wrong credential passed"
		    )
		return {
		    "message": "User signed in successfully"
		}

	여기서는 패스워드를 암호화하지 않고 일반텍스트로 저장했지만
	설명의 편의를 위해 그렇게 한 것이고 6장에서 제대로 한다.


이벤트 라우트 정의

	from typing import List

	from fastapi import APIRouter, Body, HTTPException, status
	from models.events import Event

	event_router = APIRouter(
		tags=["Events"]
	)

	events = []


	@event_router.get("/", response_model=List[Event])
	async def retrieve_all_events() -> List[Event]:
		return events


	@event_router.get("/{id}", response_model=Event)
	async def retrieve_event(id: int) -> Event:
		for event in events:
		    if event.id == id:
		        return event
		raise HTTPException(
		    status_code=status.HTTP_404_NOT_FOUND,
		    detail="Event with supplied ID does not exist"
		)


	@event_router.post("/new")
	async def create_event(body: Event = Body(...)) -> dict:
		events.append(body)
		return {
		    "message": "Event created successfully"
		}


	@event_router.delete("/{id}")
	async def delete_event(id: int) -> dict:
		for event in events:
		    if event.id == id:
		        events.remove(event)
		        return {
		            "message": "Event deleted successfully"
		        }

		raise HTTPException(
		    status_code=status.HTTP_404_NOT_FOUND,
		    detail="Event with supplied ID does not exist"
		)

변경 UPDATE 라우트는 챕터6에서 구현


main.py에 라우트 등록
	from fastapi import FastAPI
	from fastapi.responses import RedirectResponse

	from routes.users import user_router
	from routes.events import event_router

	import uvicorn

	app = FastAPI()

	# Register routes

	app.include_router(user_router,  prefix="/user")
	app.include_router(event_router, prefix="/event")


	@app.get("/")
	async def home():
		return RedirectResponse(url="/event/")

	if __name__ == '__main__':
		uvicorn.run("main:app", host="127.0.0.1", port=8000, reload=True)
		
		
사용자 라우트 테스트
python main.py

	사용자 등록 테스트
	curl -X 'POST' 'http://127.0.0.1:8000/user/signup' -H 'accept: application/json' -H 'Content-Type: application/json' -d '{"email": "philo@gmail.com", "password": "fuckyou", "events": []}'

	로그인 테스트
	curl -X 'POST' 'http://127.0.0.1:8000/user/signin' -H 'accept: application/json' -H 'Content-Type: application/json' -d '{"email": "philo@gmail.com", "password": "fuckyou"}'

	curl -X 'POST' 'http://127.0.0.1:8000/user/signin' -H 'accept: application/json' -H 'Content-Type: application/json' -d '{"email": "philo@gmail.com", "password": "fucku"}'


이벤트 라우트 테스트

	GET라우트 테스트
	curl -X 'GET' 'http://127.0.0.1:8000/event/' -H 'accept: application/json' -H 'Content-Type: application/json'

	POST라우트 테스트
	curl -X 'POST' 'http://127.0.0.1:8000/event/new' -H 'accept: application/json' -H 'Content-Type: application/json' -d '{"id": 1, "title": "test", "image": "https://test.com", "description": "testing", "tags":["test"], "location": "local"}'

	GET라우트 테스트
	curl -X 'GET' 'http://127.0.0.1:8000/event/1' -H 'accept: application/json' -H 'Content-Type: application/json'

	DELETE 라우트 테스트
	curl -X 'DELETE' 'http://127.0.0.1:8000/event/1' -H 'accept: application/json'
	
	
